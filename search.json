[{"title":"leetcodede_树专题","url":"/2021/05/25/leetcodede-%E6%A0%91%E4%B8%93%E9%A2%98/","content":"94.二叉树的中序遍历1.递归实现前序遍历：打印 - 左 - 右中序遍历：左 - 打印 - 右后序遍历：左 - 右 - 打印题目要求的是中序遍历，那就按照 左-打印-右这种顺序遍历树就可以了，递归函数实现\n终止条件：当前节点为空时函数内：递归的调用左节点，打印当前节点，再递归调用右节点时间复杂度：O(n)空间复杂度：O(h)，h是树的高度\nclass Solution &#123;\tpublic List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;\t\tList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();\t\tdfs(res,root);\t\treturn res;\t&#125;\t\tvoid dfs(List&lt;Integer&gt; res, TreeNode root) &#123;\t\tif(root==null) &#123;\t\t\treturn;\t\t&#125;\t\t//按照 左-打印-右的方式遍历\t\tdfs(res,root.left);\t\tres.add(root.val);\t\tdfs(res,root.right);\t&#125;&#125;\n\n2.迭代实现递归实现时，是函数自己调用自己，一层层的嵌套下去，操作系统/虚拟机自动帮我们用 栈 来保存了每个调用的函数，现在我们需要自己模拟这样的调用过程。\n递归的调用过程是不断往左边走，当左边走不下去了，就打印节点，并转向右边，然后右边继续这个过程。我们在迭代实现时，就可以用栈来模拟上面的调用过程。\n时间复杂度：O(n)空间复杂度：O(h)，h是树的高度\nclass Solution &#123;\tpublic List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;\t\tList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();\t\tStack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();\t\twhile(stack.size()&gt;0 || root!=null) &#123;\t\t\t//不断往左子树方向走，每走一次就将当前节点保存到栈中\t\t\t//这是模拟递归的调用\t\t\tif(root!=null) &#123;\t\t\t\tstack.add(root);\t\t\t\troot = root.left;\t\t\t//当前节点为空，说明左边走到头了，从栈中弹出节点并保存\t\t\t//然后转向右边节点，继续上面整个过程\t\t\t&#125; else &#123;\t\t\t\tTreeNode tmp = stack.pop();\t\t\t\tres.add(tmp.val);\t\t\t\troot = tmp.right;\t\t\t&#125;\t\t&#125;\t\treturn res;\t&#125;&#125;\n\n3.莫里斯遍历用递归和迭代的方式都使用了辅助的空间，而莫里斯遍历的优点是没有使用任何辅助空间。缺点是改变了整个树的结构，强行把一棵二叉树改成一段链表结构。\n\n我们将黄色区域部分挂到节点5的右子树上，接着再把2和5这两个节点挂到4节点的右边。这样整棵树基本上就变改成了一个链表了，之后再不断往右遍历。\n\n时间复杂度:找到每个前驱节点的复杂度是 O(n)，因为 nn 个节点的二叉树有 n−1 条边，每条边只可能使用 2 次(一次定位到节点，一次找到前驱节点)，故时间复杂度为 O(n)空间复杂度：O(1)\nclass Solution &#123;\tpublic List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;\t\tList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();\t\tTreeNode pre = null;\t\twhile(root!=null) &#123;\t\t\t//如果左节点不为空，就将当前节点连带右子树全部挂到\t\t\t//左节点的最右子树下面\t\t\tif(root.left!=null) &#123;\t\t\t\tpre = root.left;\t\t\t\twhile(pre.right!=null) &#123;\t\t\t\t\tpre = pre.right;\t\t\t\t&#125;\t\t\t\tpre.right = root;\t\t\t\t//将root指向root的left\t\t\t\tTreeNode tmp = root;\t\t\t\troot = root.left;\t\t\t\ttmp.left = null;\t\t\t//左子树为空，则打印这个节点，并向右边遍历\t\t\t\t&#125; else &#123;\t\t\t\tres.add(root.val);\t\t\t\troot = root.right;\t\t\t&#125;\t\t&#125;\t\treturn res;\t&#125;&#125;\n\n注：\nTreeNode tmp = root;root = root.left;tmp.left = null;\n\n在执行这段之前，根节点和右子树已经 挂到 左子树的最下面了\n    1   / \\  2   3 /      \\4       5\n\n也就是把1-3-5这挂到2的右边，挂完之后开始下一轮处理\n挂完之后，2的子节点就是1-3-5，这时候1的左节点2还没断开\n所以此刻1还是2的父节点，于是就形成环了，这步就是要把环给断开。\n226.翻转二叉树1.递归我们在做二叉树题目时候，第一想到的应该是用 递归 来解决。仔细看下题目的 输入 和 输出，输出的左右子树的位置跟输入正好是相反的，于是我们可以递归的交换左右子树来完成这道题。看一下动画就明白了：\n\n其实就是交换一下左右节点，然后再递归的交换左节点，右节点根据动画图我们可以总结出递归的两个条件如下：\n\n终止条件：当前节点为 null 时返回\n交换当前节点的左右节点，再递归的交换当前节点的左节点，递归的交换当前节点的右节点\n\n时间复杂度：每个元素都必须访问一次，所以是 O(n)O(n)空间复杂度：最坏的情况下，需要存放 O(h)O(h) 个函数调用(h是树的高度)，所以是 O(h)O(h)代码实现如下：\nclass Solution &#123;\tpublic TreeNode invertTree(TreeNode root) &#123;\t\t//递归函数的终止条件，节点为空时返回\t\tif(root==null) &#123;\t\t\treturn null;\t\t&#125;\t\t//下面三句是将当前节点的左右子树交换\t\tTreeNode tmp = root.right;\t\troot.right = root.left;\t\troot.left = tmp;\t\t//递归交换当前节点的 左子树\t\tinvertTree(root.left);\t\t//递归交换当前节点的 右子树\t\tinvertTree(root.right);\t\t//函数返回时就表示当前这个节点，以及它的左右子树\t\t//都已经交换完了\t\treturn root;\t&#125;&#125;\n\n2.迭代递归实现也就是深度优先遍历的方式，那么对应的就是广度优先遍历。广度优先遍历需要额外的数据结构–队列，来存放临时遍历到的元素。深度优先遍历的特点是一竿子插到底，不行了再退回来继续；而广度优先遍历的特点是层层扫荡。所以，我们需要先将根节点放入到队列中，然后不断的迭代队列中的元素。对当前元素调换其左右子树的位置，然后：\n\n判断其左子树是否为空，不为空就放入队列中\n判断其右子树是否为空，不为空就放入队列中\n\n动态图如下：\n\n深度优先遍历和广度优先遍历，从动画图中看起来很类似，这是因为演示的树层数只有三层。时间复杂度：同样每个节点都需要入队列/出队列一次，所以是 O(n)O(n)空间复杂度：最坏的情况下会包含所有的叶子节点，完全二叉树叶子节点是 n/2个，所以时间复杂度是 0(n)0(n)代码实现如下：\nclass Solution &#123;\tpublic TreeNode invertTree(TreeNode root) &#123;\t\tif(root==null) &#123;\t\t\treturn null;\t\t&#125;\t\t//将二叉树中的节点逐层放入队列中，再迭代处理队列中的元素\t\tLinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();\t\tqueue.add(root);\t\twhile(!queue.isEmpty()) &#123;\t\t\t//每次都从队列中拿一个节点，并交换这个节点的左右子树\t\t\tTreeNode tmp = queue.poll();\t\t\tTreeNode left = tmp.left;\t\t\ttmp.left = tmp.right;\t\t\ttmp.right = left;\t\t\t//如果当前节点的左子树不为空，则放入队列等待后续处理\t\t\tif(tmp.left!=null) &#123;\t\t\t\tqueue.add(tmp.left);\t\t\t&#125;\t\t\t//如果当前节点的右子树不为空，则放入队列等待后续处理\t\t\tif(tmp.right!=null) &#123;\t\t\t\tqueue.add(tmp.right);\t\t\t&#125;\t\t\t\t\t&#125;\t\t//返回处理完的根节点\t\treturn root;\t&#125;&#125;\n\n","categories":["算法"],"tags":["leetcode"]},{"title":"springboot学习笔记","url":"/2021/05/19/springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"1. Spring Boot概述目标：了解Spring Boot是什么，有什么作用\n小结：\nSpring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；实现开发人员把时间都集中在业务开发上。\n2. Spring Boot入门目标：能够使用Spring Boot搭建项目\n分析：\n需求：可以在浏览器中访问http://localhost:8080/hello输出一串字符\n实现步骤：\n\n创建工程；\n添加依赖（启动器依赖，spring-boot-starter-web）；\n创建启动类；\n创建处理器Controller；\n测试\n\n小结：\nSpring Boot工程可以通过添加启动器依赖和创建启动引导类实现快速创建web工程。\n\nspring-boot-starter-web默认的应用服务器端口是8080\n\n3. Java代码方式配置目标：可以使用@Value获取配置文件配置项并结合@Bean注册组件到Spring\n分析：\n需求：使用Java代码配置数据库连接池，并可以在处理器中注入并使用\n步骤：\n\n添加依赖；\n创建数据库；\n创建数据库连接参数的配置文件jdbc.properties；\n创建配置类；\n改造处理器类注入数据源并使用\n\n小结：\npackage com.itheima.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.PropertySource;import javax.sql.DataSource;@Configuration@PropertySource(&quot;classpath:jdbc.properties&quot;)public class JdbcConfig &#123;    @Value(&quot;$&#123;jdbc.url&#125;&quot;)    String url;    @Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)    String driverClassName;    @Value(&quot;$&#123;jdbc.username&#125;&quot;)    String username;    @Value(&quot;$&#123;jdbc.password&#125;&quot;)    String password;    @Bean    public DataSource dataSource()&#123;        DruidDataSource dataSource = new DruidDataSource();        dataSource.setDriverClassName(driverClassName);        dataSource.setUrl(url);        dataSource.setUsername(username);        dataSource.setPassword(password);        return dataSource;    &#125;&#125;\n\n\n\n4. Spring Boot属性注入方式目标：能够使用@ConfigurationProperties实现Spring Boot配置文件配置项读取和应用\n分析：\n需求：将配置文件中的配置项读取到一个对象中；\n实现：可以使用Spring Boot提供的注解@ConfigurationProperties，该注解可以将Spring Boot的配置文件（默认必须为application.properties或application.yml）中的配置项读取到一个对象中。\n实现步骤：\n\n创建配置项类JdbcProperties类，在该类名上面添加@ConfigurationProperties；\n将jdbc.properties修改名称为application.properties；\n将JdbcProperties对象注入到JdbcConfig；\n测试\n\n小结：\n\n使用@ConfigurationProperties编写配置项类将配置文件中的配置项设置到对象中\n\n@ConfigurationProperties(prefix = &quot;jdbc&quot;)public class JdbcProperties &#123;    private String url;    private String driverClassName;    private String username;    private String password;    public String getUrl() &#123;        return url;    &#125;    public void setUrl(String url) &#123;        this.url = url;    &#125;    public String getDriverClassName() &#123;        return driverClassName;    &#125;    public void setDriverClassName(String driverClassName) &#123;        this.driverClassName = driverClassName;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;&#125;\n\n\n\n\n使用@ConfigurationProperties在方法上面使用\n\n@Bean@ConfigurationProperties(prefix = &quot;jdbc&quot;)public DataSource dataSource() &#123;    return new DruidDataSource();&#125;\n\n\n\n5. 多个yml文件配置目标：可以将多个yml文件在application.yml文件中配置激活\n分析：\nyaml与properties配置文件除了展示形式不相同以外，其它功能和作用都是一样的；在项目中原路的读取方式不需要改变。\n1）yml配置文件的特征：\n\n树状层级结构展示配置项；\n配置项之间如果有关系的话需要分行空两格；\n配置项如果有值的话，那么需要在 :之后空一格再写配置项值；\n\n将application.properties配置文件修改为application.yml的话：\njdbc:  driverClassName: com.mysql.jdbc.Driver  url: jdbc:mysql://127.0.0.1:3306/heima  username: root  password: rootkey:  abc: cba  def:    - g    - h    - j\n\n\n\n2）多个yml配置文件；在spring boot中是被允许的。这些配置文件的名称必须为application-***.yml，并且这些配置文件必须要在application.yml配置文件中激活之后才可以使用。\n3）如果properties和yml配置文件同时存在在spring boot项目中；那么这两类配置文件都有效。在两个配置文件中如果存在同名的配置项的话会以properties文件的为主。\n小结：\n在多个配置文件时，需要将这些文件在application.yml文件中进行激活：\n#激活配置文件;需要指定其它的配置文件名称spring:  profiles:    active: abc,def\n\n\n\n6. 自动配置原理目标：了解Spring Boot项目的配置加载流程\n小结：\n\n在 META-INF\\spring.fatories文件中定义了很多自动配置类；可以根据在pom.xml文件中添加的 启动器依赖自动配置组件\n通过如下流程可以去修改application配置文件，改变自动配置的组件默认参数\n\n\n7. lombok应用目标：使用lombok的注解实现pojo类的简化\n分析：\n使用Spring Boot整合SSM工程；需要使用到数据库数据。\n\n将数据库表数据导入到数据库中（springboot_test）；\n\n编写数据库表对应的实体类；一般情况下需要编写get/set/toString等这些方法会耗时并且会让实体类看起来比较臃肿。可以使用lombok插件对实体类进行简化。\nlombok是一个插件工具类包；提供了一些注解@Data、@Getter等这些注解去简化实体类中的构造方法、get/set等方法的编写。\n\n在IDEA中安装lombok插件；\n添加lombok对应的依赖到项目pom.xml文件；\n改造实体类使用lombok注解\n\n\n\n小结：\n在Bean上使用：@Data ：自动提供getter和setter、hashCode、equals、toString等方法@Getter：自动提供getter方法@Setter：自动提供setter方法@Slf4j：自动在bean中提供log变量，其实用的是slf4j的日志功能。\n8. Spring Boot整合-SpringMVC端口和静态资源目标：可以修改tomcat的端口和访问项目中的静态资源\n分析：\n\n修改tomcat端口\n查询**Properties，设置配置项（前缀+类变量名）到application配置文件中\n\n访问项目中的静态资源\n静态资源放置的位置；放置静态资源并访问这些资源\n\n\n小结：\n\n修改项目tomcat端口：\n\n#tomcat端口server:  port: 80\n\n\n在spring boot项目中静态资源可以放置在如下目录：\n \n\n\n9.Spring Boot整合-SpringMVC拦截器目标：可以在Spring Boot项目中配置自定义SpringMVC拦截器\n分析：\n\n编写拦截器（实现HandlerInterceptor）；\n编写配置类实现 WebMvcConfigurer，在该类中添加各种组件；\n测试\n\n小结：\n可以在spring boot项目中通过配置类添加各种组件；如果要添加拦截器的话：\npackage com.itheima.config;import com.itheima.interceptor.MyInterceptor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class MvcConfig implements WebMvcConfigurer &#123;    //注册拦截器    @Bean    public MyInterceptor myInterceptor()&#123;        return new MyInterceptor();    &#125;    //添加拦截器到spring mvc拦截器链    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        registry.addInterceptor(myInterceptor()).addPathPatterns(&quot;/*&quot;);    &#125;&#125;\n\n\n\n10. Spring Boot整合-事务和连接池目标：配置Spring Boot自带默认的hikari数据库连接池和使用@Transactional注解进行事务配置\n分析：\n\n事务配置\n\n添加事务相关的启动器依赖，mysql相关依赖；\n编写业务类UserService使用事务注解@Transactional\n\n\n数据库连接池hikari配置\n只需要在application配置文件中指定数据库相关参数\n\n\n小结：\n\n事务配置；只需要添加jdbc启动器依赖\n数据库连接池使用默认的hikari，在配置文件中配置如下：\n\nspring:  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://127.0.0.1:3306/springboot_test    username: root    password: root\n\n\n\n11. Spring Boot整合-Mybatis目标：配置Mybatis在Spring Boot工程中的整合包，设置mybatis的实体类别名，输出执行sql语句配置项\n分析：\n\n添加启动器依赖；\n配置Mybatis：实体类别名包，日志，映射文件等；\n配置MapperScan\n\n小结：\n\n添加mybatis官方对于spring boot的一个启动器\n&lt;!--mybatis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;2.0.1&lt;/version&gt;&lt;/dependency&gt;  \n配置mybatis\nmybatis:  # 实体类别名包路径  type-aliases-package: com.itheima.pojo  # 映射文件路径  # mapper-locations: classpath:mappers/*.xml  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n设置启动器类中的mapper扫描\n \n\n\n12. Spring Boot整合-通用Mapper目标：配置通用Mapper组件到Spring Boot项目中并使用Mapper接口\n分析：\n通用Mapper：可以实现自动拼接sql语句；所有的mapper都不需要编写任何方法也就是不用编写sql语句。可以提高开发效率。\n\n添加启动器依赖；\n改造UserMapper继承Mapper；\n修改启动引导类Application中的Mapper扫描注解；\n修改User实体类添加jpa注解；\n改造UserService实现业务功能；\n\n小结：\n\n在启动引导类上面的mapper扫描注解 一定要修改为 通用mapper的扫描注解\n\n13. Spring Boot整合测试目标：可以访问处理器对应路径将数据库中的数据根据id查询\n分析：\n\n改造HelloController，注入UserService利用其方法实现查询；\n启动项目进行测试 http://localhost/user/用户id –&gt; http://localhost/user/8\n\n小结：\n修改了HelloController：\n@Autowiredprivate UserService userService;/** * 根据用户id查询用户 * @param id 用户id * @return 用户 */@GetMapping(&quot;/user/&#123;id&#125;&quot;)public User queryById(@PathVariable Long id)&#123;    return userService.queryById(id);&#125;\n\n\n\n14. Spring Boot整合-Junit目标：在Spring Boot项目中使用Junit进行单元测试UserService的方法\n分析：\n\n添加启动器依赖spring-boot-starter-test；\n编写测试类\n\n小结：\n@RunWith(SpringRunner.class)@SpringBootTestpublic class UserServiceTest &#123;    @Autowired    private UserService userService;    @Test    public void queryById() &#123;        User user = userService.queryById(8L);        System.out.println(&quot;user = &quot; + user);    &#125;    @Test    public void saveUser() &#123;        User user = new User();        user.setUserName(&quot;test2&quot;);        user.setName(&quot;test2&quot;);        user.setAge(13);        user.setPassword(&quot;123456&quot;);        user.setSex(1);        user.setCreated(new Date());        userService.saveUser(user);    &#125;&#125;\n\n\n在Spring Boot项目中如果编写测试类则必须要在类上面添加@SpringBootTest\n\n15. Spring Boot整合-redis目标：在Spring Boot项目中使用Junit测试RedisTemplate的使用\n分析：\n\n添加启动器依赖；spring-boot-starter-data-redis\n配置application.yml中修改redis的连接参数；（redis需要启动）\n编写测试类应用RedisTemplate操作redis中的5种数据类型（string/hash/list/set/sorted set）\n\n小结：\n@RunWith(SpringRunner.class)@SpringBootTestpublic class RedisTest &#123;    @Autowired    private RedisTemplate redisTemplate;    @Test    public void test()&#123;        //string 字符串        //redisTemplate.opsForValue().set(&quot;str&quot;, &quot;heima&quot;);        redisTemplate.boundValueOps(&quot;str&quot;).set(&quot;heima&quot;);        System.out.println(&quot;str = &quot; + redisTemplate.opsForValue().get(&quot;str&quot;));        //hash 散列        redisTemplate.boundHashOps(&quot;h_key&quot;).put(&quot;name&quot;, &quot;heima&quot;);        redisTemplate.boundHashOps(&quot;h_key&quot;).put(&quot;age&quot;, 13);        //获取所有域        Set set = redisTemplate.boundHashOps(&quot;h_key&quot;).keys();        System.out.println(&quot; hash散列的所有域：&quot; + set);        //获取所有值        List list = redisTemplate.boundHashOps(&quot;h_key&quot;).values();        System.out.println(&quot; hash散列的所有域的值：&quot; + list);        //list 列表        redisTemplate.boundListOps(&quot;l_key&quot;).leftPush(&quot;c&quot;);        redisTemplate.boundListOps(&quot;l_key&quot;).leftPush(&quot;b&quot;);        redisTemplate.boundListOps(&quot;l_key&quot;).leftPush(&quot;a&quot;);        //获取全部元素        list = redisTemplate.boundListOps(&quot;l_key&quot;).range(0, -1);        System.out.println(&quot; list列表中的所有元素：&quot; + list);        // set 集合        redisTemplate.boundSetOps(&quot;s_key&quot;).add(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);        set = redisTemplate.boundSetOps(&quot;s_key&quot;).members();        System.out.println(&quot; set集合中的所有元素：&quot; + set);        // sorted set 有序集合        redisTemplate.boundZSetOps(&quot;z_key&quot;).add(&quot;a&quot;, 30);        redisTemplate.boundZSetOps(&quot;z_key&quot;).add(&quot;b&quot;, 20);        redisTemplate.boundZSetOps(&quot;z_key&quot;).add(&quot;c&quot;, 10);        set = redisTemplate.boundZSetOps(&quot;z_key&quot;).range(0, -1);        System.out.println(&quot; zset有序集合中的所有元素：&quot; + set);    &#125;&#125;\n\n\n\n16. Spring Boot项目部署目标：将Spring Boot项目使用maven指令打成jar包并运行测试\n分析：\n\n需要添加打包组件将项目中的资源、配置、依赖包打到一个jar包中；可以使用maven的package；\n部署：java -jar 包名\n\n小结：\n\n添加打包组件\n&lt;build&gt;    &lt;plugins&gt;       &lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;\n部署运行\njava -jar 包名\n\n","categories":["java"],"tags":["java"]},{"title":"related","url":"/2021/05/19/%E5%A7%BF%E6%80%81%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/","content":"A. 解决视频帧之间的时间依赖和几何一致性的方法employ recurrent neural networks (RNNs) such as Long Short Term Memory (LSTM), Gate Recurrent Unit (GRU) or 3DCNNs to model geometric consistency as well as temporal dependency across video frames.\n使用循环神经网络(RNNs)，如长期记忆(LSTM)，门循环单元(GRU)或3DCNNs来建模几何一致性以及视频帧之间的时间依赖性。\n1. Lstm pose machines使用卷积LSTM捕捉时间和空间线索，并直接预测视频的关键点热图序列。这种基于RNN的方法在人体空间稀疏的情况下更有效，例如在单人场景中具有最小的遮挡。然而，在多人姿态估计中经常出现遮挡的情况下，甚至在单人情况下出现严重遮挡时，极易影响算法的性能。\n2. Combining detection and tracking for human pose estimation in videos.提出了一个3DHRNet (HRNet的扩展，包括时间维度)，用于跨视频帧提取空间和时间特征以估计姿态序列。这个模型已经显示了出色的结果，特别是对于足够长的持续时间的单人序列。\n3. Thin-slicing network: A deep structured model for pose estimation in videos.建议计算每两帧之间的密集光流，并利用附加的基于流的表示来对齐预测。\n4. Flowing convnets for human pose estimation in videos.建议计算每两帧之间的密集光流，并利用附加的基于流的表示来对齐预测。\n5.Learning temporal pose estimation from sparsely-labeled videos提出通过翘曲机制从稀疏标记的视频中学习一个有效的视频姿态检测器\nB. 基于图像的姿态估计1.早期\nHuman pose estimation with iterative error feedback. 通过回归图像特征直接输出骨骼关节坐标\nStacked hourglass networks for human pose estimation.利用概率热图来表示节点位置。\n\n3.Bottom-Up自底向上的方法首先检测个体的身体部位，然后将这些组成部分组装成整个人。\n\nRealtime multi-person 2d pose estimation using part affinity fields. 构建一个自底向上的管道，并利用部件关联字段来捕获不同主体部件之间的成对关系。\nFast multi-person pose estimation using pose residual network. \nPifpaf: Composite fields for human pose estimation.\nCrowdpose: Efficient crowded scenes pose estimation and a new benchmark\n\n4.Top-Down自上而下的方法首先进行人的检测，然后对每个个体进行单人姿态估计。\n\nConvolutional pose machines.提出了一种卷积位姿机的顺序架构，该架构遵循迭代精炼每个网络阶段输出的策略。\nRmpe: Regional multi-person pose estimation.设计一个对称的空间变压器网络，从一个不准确的包围框中提取高质量的单人区域。\nDeep high-resolution representation learning for human pose estimation. 最近的一项工作提出了一个HRNet，它执行多尺度融合来保留高分辨率的特征。这提高了关键热图的空间精度，并在几个基于图像的基准上达到了最先进的水平。\n\n5.Top-Down VS Bottom-Up图像姿态：通过利用鲁棒的人检测器，top-down可以专注于边界盒区域内的联合检测任务，而不必处理自底向上方法所做的大规模变化和将关节分组成人的问题。\n视频姿态：自顶向下的方法在视频上的表现并不好，最近被自底向上的方法[25]所超越。因为在视频中检测人的边界框比在图像中检测要困难得多。虽然图像经常捕捉人们“摆姿势”，视频固有地包含非典型类型的遮挡、视点、运动模糊和姿态，使目标检测器偶尔失败\nC. 视频级的时间信息1.动机[Deep Dual Consecutive Network for Human Pose Estimation 3.1]1)尽管现有的姿态估计方法(如[33,12])在视频上的性能下降，但我们观察到，它们的预测仍然为逼近关键点的空间位置提供了有用的信息。\n2)时间一致性，即个体的姿态不会在很少的帧间隔(通常是1/60到1/25秒)中经历戏剧性和突然的变化。\n2.任务多人人体姿态跟踪是检测所有视频帧中所有人的身体关节并随着时间正确连接的双重任务。\n","categories":["姿态估计"],"tags":["神经网络"]},{"title":"摄像头API调研","url":"/2021/05/20/%E6%91%84%E5%83%8F%E5%A4%B4API%E8%B0%83%E7%A0%94/","content":"1.华为云视频接入服务该服务提供实时视频数据接入功能，包括摄像头视频数据采集、实时数据分发和视频数据转储等能力。借助视频接入服务，您可以与华为云视频分析服务集成，快速构建基于实时视频数据的智能分析应用。\na.视频接入服务视频接入服务（Video Ingestion Service，简称VIS）是华为云提供的实时视频数据接入服务，提供了摄像头视频数据采集、实时数据分发和视频数据转储等能力。借助视频接入服务，您可以与华为云视频分析服务集成，快速构建基于实时视频数据的智能分析应用。\n\n视频接入服务支持一下类型：\n\n视频流：支持RTMP和HTTP-FLV类型的视频流，视频流编码格式支持H264。\n设备：支持GB28181摄像设备接入，视频流编码格式支持H264、H265。\n\n使用场景广泛，包括智慧园区监控、智慧城市安防\n智慧园区监控园区大量使用门禁闸机、摄像头等设备实现安全管理，VIS提供了便捷的视频流管理，与华为EI视频分析服务（Video Analysis Service，VAS）对接，助力智慧园区应用的开发和运维。\n\n便捷易用：快速建立界面可视化的多路视频流管理。\n多协议支持：通过GB28181、RTMP协议自动收集和传输视频流数据。\nAI应用：利用人脸识别、视频分析服务实现智慧园区应用。\n\n\n智慧城市安防VIS高效收集和传输城市安防产生的大量视频流数据，持久化存储，并与视频分析服务对接，实现快速分析处理。\n\n多协议支持：通过GB28181协议实现摄像设备管理、视频流收集传输。\nAI应用：使用人脸识别、视频分析、ModelArts服务进行智能分析处理。\n\n\nb.API概览1.视频流管理\n\n创建视频流：该接口用于创建视频流。\n更新视频流：该接口用于更新视频流的详情，包括RTMP以及HTTP-FLV类型视频流。对于GB28181设备自动关联的视频流，不能通过该接口进行更新。\n删除视频流：此接口用于删除指定视频流。\n更新转储信息：此接口用于更新视频转储信息。创建的视频流默认没有转储信息，即视频数据不会保存。更新转储信息后可以将视频流保存到指定的存储媒介，如OBS。后续用户可以从OBS上获取到转储的视频。\n获取视频流信息：此接口用于获取指定视频流的详细信息。\n获取视频流列表：此接口用于获取所有视频流的详细信息。\n获取视频流地址：此接口用于获取指定视频流的地址。该地址用于进行视频流推流或者拉流。\n\n2.设备指标统计\n\n获取曾经上线设备列表:该接口用于获取曾经上线的GB28181设备列表，即只要上线过的设备信息都会显示。\n获取新上线设备列表:该接口用于获取今天新上线（即之前没有上线记录）的GB28181设备列表。\n获取视频包接收率:该接口用于获取当天有视频接入的GB28181设备的平均视频包接受率的列表。\n\n2. 海康威视摄像机的二次开发设备必须满足的要求：\n\n支持二次开发\n支持无线联网\n像素能看\n价钱合适\n\n综合以上指标最后选定：DS-2DC2204IW-DE3/W\n\na. 摄像头的激活新购买的设备需要通过 SADP工具 激活。\n激活的过程：\n设备上电，并连接局域网下载 SADP工具，并安装在同一个局域网的电脑上，打开工具，搜索到的设备是“未激活”状态。输入新密码、确认密码，点击 激活，激活成功后，设备状态变为“激活”状态，并且可以修改设备的网络参数(IP，PORT) 设备已经激活完毕，并且设备的IP、端口、用户名(默认用户是 admin)、密码均已设置完毕。\nb. 集成 SDK 开发海康设备的SDK是通过网络的方式访问设备，需要用到设备激活过程中设置的参数：IP、端口、用户名、密码、主动注册登录设备\n海康威视的设备能力，按照设备类型对外开放，现阶段（2020-9）按照设备类型对外开放的接口，包括：AI 摄像机、通用摄像机、出入口产品、门禁产品\nc.SDK 接口的主要调用流程\n其中虚线框的流程是可选部分，不会影响其他流程和模块的功能使用。按实现功能的不同可以分成十个模块，实现每个模块的功能时初始化SDK、用户注册设备、注销设备和释放SDK资源这4个流程是必不可少的。\n\n初始化 SDK：对整个网络SDK系统的初始化、内存分配等操作。\n设置连接超时时间：可选，用于设置SDK中的网络连接超时时间，用户可以根据自己的需要设置该值，在不调用此接口设置超时时间的情况下，将采用SDK中的默认值。\n设置接收异常消息的回调函数：由于SDK中大部分模块的功能都是由异步模式实现，所以可以使用此接口接收预览、报警、回放、透明通道和语音对讲等模块发生的异常信息。用户可以在初始化SDK后就设置该回调函数，在应用层对各个模块异常消息的接收和处理。从解析服务器获得设备的IP地址：该接口提供一种在仅知道设备名称（或者设备域名）和序列号的情况下，从解析服务器（IP Server 或者 DDNS Dynamic Domain Name Server，动态域名服务）获得设备IP地址的方法。\n用户注册设备：实现用户的注册功能，注册成功后返回的用户ID作为其他功能操作的唯一标识，SDK允许最大注册个数为2048个。就设备而言，V3.0以上版本支持的设备允许有32个注册用户名，而且同时最多允许128个用户注册；V3.0一下版本支持的设备允许有16个注册用户名；而且同时最多允许128个用户注册。预览模块：从设备取实时码流，解码显示以及播放控制、抓图等功能。回放和下载模块：可以通过按时间和文件名的方式远程回放或者下载设备的录像文件，后续可以进行解码或存储。同时还支持断点续传功能。\n参数配置模块：设置和获取设备参数，主要包括设备参数、网络参数、通道压缩参数、串口参数、报警参数、异常参数、交易信息和用户配置等参数。远程设备维护模块：实现关闭设备、重启设备、恢复默认值、远程硬盘格式化、远程升级和配置文件导入/导出等维护工作。\n语音对讲转发模块：实现和设备的语音数据对讲和语音数据获取，音频编码格式指定。\n报警模块：处理设备上传的各种报警信号。报警分为”布防“和”监听“两种方式，在采用监听方式并且不需要获取用户ID的情况下，报警模块可以无需进行”用户注册“操作步骤。\n透明通道模块：透明通道是将IP数据报文解析后直接发送到串行口的一种技术。实际上起到了沿伸串行设备控制距离的作用。可利用IP网络控制多种串行设备，如控制解码器、矩阵、报警主机、门禁、仪器仪表等串行设备，对用户来说，只看到了点对点的传输，无须关心网络传输的过程，所以称为串口透明通道。SDK提供485和232串口作为透明通道功能，其中要将232作为透明通道使用，首先必须在232串口的配置信息中将工作模式选为透明通道，这样232串口才可作为透明通道使用。\n云台控制模块：实现对云台的基本操作、预置点、巡航、轨迹和透明云台的控制。SDK将云台控制分为两种模式：一种是通过图像预览返回的句柄进行控制；另一种是无预览限制，通过用户注册ID号进行云台控制。\n解码器功能模块：实现解码器设备的配置、解码控制等功能。SDK支持单路解码器和多路解码器，但目前以多路解码器为主流产品。\n智能行为分析模块：实现对智能产品的参数配置，报警上传和能力集获取等功能\n\n3.安卓如何调用摄像头拍照创建布局文件// 创建布局文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    tools:context=&quot;.MainActivity&quot;&gt;        &lt;!--用于显示预览--&gt;    &lt;SurfaceView        android:id=&quot;@+id/surfaceview&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;    &lt;!--LinearLayout线性布局管理器 放在父容器底部--&gt;    &lt;!--LinearLayout线性布局管理器 内部水平分布--&gt;    &lt;LinearLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:layout_alignParentBottom=&quot;true&quot;        android:orientation=&quot;horizontal&quot;        android:gravity=&quot;center_horizontal&quot;&gt;        &lt;Button            android:id=&quot;@+id/take_photo&quot;            android:layout_width=&quot;wrap_content&quot;            android:layout_height=&quot;wrap_content&quot;            android:text=&quot;拍照&quot; /&gt;        &lt;Button            android:id=&quot;@+id/preview&quot;            android:layout_width=&quot;wrap_content&quot;            android:layout_height=&quot;wrap_content&quot;            android:text=&quot;打开摄像头&quot; /&gt;            &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt;\n\n主函数方法1.这里调用了Camera 的类2.声明一个布尔型变量ispreview，用来判断摄像头是否打开\n//写在开始部分  private Camera camera;  private boolean ispreview = false;\n\n3.设置全屏显示\n //写在onCreat方法里面getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,               WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n4.获取SurfaceView,SurfaceHolder\n//写在onCreat方法里面   final SurfaceView surface = findViewById(R.id.surfaceview);//获取surfaceview      final SurfaceHolder surfaceHolder = surface.getHolder();//获取suafaceholder      surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n5.获取监听预览按钮\n //写在onCreat方法里面Button preview = findViewById(R.id.preview);       preview.setOnClickListener(new View.OnClickListener() &#123;           @Override           public void onClick(View v) &#123;               if (!ispreview) &#123;//如果没打开                   camera = Camera.open();//打开摄像头                   ispreview = true;               &#125;               try &#123;                   camera.setPreviewDisplay(surfaceHolder);//设置预览                   Camera.Parameters parameters = camera.getParameters();//获取摄像头参数                   parameters.setPictureFormat(PixelFormat.JPEG);//设置图片为jpg                   parameters.set(&quot;jpeg-quality&quot;, 80);//设置图片质量                   camera.setParameters(parameters);//重新设置摄像头参数                   camera.startPreview();//开始预览                   camera.setDisplayOrientation(90);//不加的话，预览的图像就是横的                   camera.autoFocus(null);//自动对焦               &#125; catch (IOException e) &#123;                   e.printStackTrace();               &#125;           &#125;       &#125;);\n\n6.拍照\n//写在onCreat方法里面Button take_photo = (Button)findViewById(R.id.take_photo);//获取按钮take_photo.setOnClickListener(new View.OnClickListener() &#123;//监听          @Override          public void onClick(View v) &#123;              if (camera != null) &#123;                  camera.takePicture(null, null, jpeg);              &#125;          &#125;      &#125;);\n\n7.存储图像\n//写在onCreat方法外面final Camera.PictureCallback jpeg = new Camera.PictureCallback() &#123;      @Override      public void onPictureTaken(byte[] data, Camera camera) &#123;          Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);          //根据拍照得到的数据集创建位图          camera.stopPreview();          ispreview = false;          File appDir = new File(Environment.getExternalStorageDirectory(), &quot;/DCIM/Camera/&quot;);          if (!appDir.exists()) &#123;//如果目录不存在              appDir.mkdir();//创建目录          &#125;          String filename = System.currentTimeMillis() + &quot;.jpg&quot;;          File file = new File(appDir, filename);          try &#123;              FileOutputStream outputStream = new FileOutputStream(file);              //创建文件输出流              bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);              //将图片压缩成JPEG格式输出到输出流              outputStream.flush();//将缓冲区的数据都输入到输出流              outputStream.close();//关闭输出流          &#125; catch (FileNotFoundException e) &#123;              e.printStackTrace();          &#125; catch (IOException e) &#123;              e.printStackTrace();          &#125;          //将图片插入到系统图库          try &#123;              MediaStore.Images.Media.insertImage(MainActivity.this.getContentResolver(), file.getAbsolutePath(), filename, null);          &#125; catch (FileNotFoundException e) &#123;              e.printStackTrace();          &#125;          //通知图库更新          MainActivity.this.sendBroadcast(new Intent(Intent.                  ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse(&quot;file://&quot;+&quot;&quot;)));          Toast.makeText(MainActivity.this,&quot;照片已存&quot;+file,Toast.LENGTH_LONG).show();          resetCamera();//图片保存后，判断，是否需要重新打开预览，重新创建一个方法，第8步      &#125;  &#125;;\n\n8.重新判定摄像头是否在预览\nprivate void resetCamera() &#123;\tif (!ispreview) &#123;    camera.startPreview();    ispreview=true;   \t&#125;&#125;\n\n9.释放摄像头资源\nprotected  void onPause() &#123;    super.onPause();    if(camera!=null)&#123;        camera.stopPreview();        camera.release();    &#125;&#125;\n\n10.从这边开始，我们就完成了整体布局，下面去manifest文件中进行权限处理路径为：app/manifes/AndroidManifest.xml ， 这是安卓布局文件\n\n增加了 摄像头权限，读写权限，自动对焦 的申请\n\n&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;    tools:ignore=&quot;ProtectedPermissions&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera.autofoucs&quot;/&gt;\n\n","categories":["日常调研"],"tags":["华为云"]},{"title":"高维度思考","url":"/2021/05/31/%E9%AB%98%E7%BB%B4%E5%BA%A6%E6%80%9D%E8%80%83/","content":"1.解决问题的三个领域\n\n已知的已知=知道=知道自己知道——问题和答案均已知。这个对应既有的经验和知识。也就是说，已经发生过的事，可以共享、保存以便于以后活用。那也就意味着，这种问题是存在“正确的答案”的。应对的方法是“如何有效、准确、快速地解决问题”。\n已知的未知=不知道=知道自己不知道——问题已知而答案未知。这个一般指狭义的解决问题。比如，“知道成本低的产品更畅销但不知道该如何实现”产品的开发等，对应的就是这个领域。在这里，“问题已经给出”是大前提。\n未知的未知=不知道=不知道自己不知道——连问题都不知道。这跟上面提到的那种盲目自大、无敬畏之心的无知，还是有很大的区别。这个可以算是广义的解决问题，即发现问题的领域。比如，商界很多因素不确定性很高，仅靠因循守旧第思考并不能取得成功，因此必须创新。\n\n这三个领域的认知和应对方式可以理解成解决问题的三个层次。\n2.提升思考维度的三个方法2.1 元“元”指的是比我们惯常代用的观察视角和思考模式高一个级别的视角观察和思考的模式，亦即“俯瞰”式观察和思考的模式。\n这种思考模式，会使得我们能获得一种“元视角”，也就是能从空间、时间、具体到抽象“全方位俯瞰”到事物本身的一种视角。这种视角下的思考，会让我们看待一个问题或者事物变得更加全面、完整、有广度和深度。\n如何才能达到元视角的高度？细谷功认为，就是在思考时拉升自己的维度，也就是《高维度思考法》中的“高维度”。\n2.2 第一种：通过抽象化、类推升推思考抽象化是人类思维的一种高级模式，是人类智慧的一次飞跃性进步。比如，科学的定律就是一种典型抽象化升维。所谓的定律，一般是指不同事物间的共同点，从他们中间总结出来的规律，可以适用于各种各样的事物和现象。各类科学的进步，都基本上遵循了这一原则。\n类推思维，也是一种抽象化的升维。所谓类推，就是从“表面上不同，结构上类似”的遥远领域借用创意的思维。Netfix的创始人因为租借DVD时，导致付的租金是DVD碟售价的三倍，想到了借用健身房包月制租借的模式租碟的创意，从而开创了Neflix新商业模式。这就是一种典型的类推升维的思维案例\n2.3 第二种：通过思考的“轴”升维思考数学中有XYZ之类的坐标轴形象，从而使得其变量增多，思维的方式也一样。\n比如，你看一件事情，从上到下是X轴的话，那么从内到外可以理解为Y轴。通过这两个轴思考问题，会比单从一个轴看问题全面一些，但仅仅做到这样还不够，如果你再能增加一个轴，Z轴，也就是从整体到局部看的话，你会发现，你的思考维度就增多了一维，比以前只有X和Y二维全面和完整的多，变成了三维思考。\n实际上，通过思考轴升维，可以让我们避免盲点，看问题可以变得更加具有深度、广度，更加全面。\n\n2.4 第三种：通过“Why”升维思考5W1H本身就是一种非常棒的思考工具。我们日常所抱有的疑问分为几种，几乎被英语中常用的5W1H囊括无遗。Why（为什么？）What（什么？）Where（哪里?）Who(谁？)When（什么时候？）How（怎样做？）\n\n通过这两张图我们可以看出，Why是一个可以上升到高维的词。也就是说，通过不断地追问为什么，可以让我们的思考模式不断拓展和升维，使得我们所追溯问题的方式，可以不断地向上游回溯，如果在思考同一个问题的话，能至少追问5个为什么，基本上就可以让我们挖掘出来问题的真正根源。\n在这个金字塔结构中，What是对Why的展开，相当于是向下位展开，而在What的下面，追问的How越多，所能覆盖到的面就越宽，获得的信息就越多，越完整。比如How muc，How often，How long，How…\n3.有价值的三个建议3.1 无知之知苏格拉底被认为是最有智慧的人，但苏格拉底却说自己与他们的不同之处在于“我知道‘自己多么无知’ ”。而拉姆斯菲尔德，则在别人问询“伊拉克政府向持有大规模杀伤性武器的恐怖分子提供援助一说有何证据”时，说“首 先 存 在 知 道 自 己 知 道 的‘已 知 的 已 知’（known knowns） ，然后存在知道自己不知道的‘已知的未知’（known unknowns），另外还存在不知道自己不知道的‘未知的未知’（unknown unknowns） 。”\n认知存在三个领域，已知的已知，已知的未知，和未知的未知。已知的已知不必解释，所谓已知的未知和未知的未知，主要的区别就是：已知的未知，说的是问题已知而答案未知；而未知的未知，是连问题也不知道。\n这个关于认知的划分就是很好的认知工具，当你试着去回答一个开放式的问题，你就可以思考，你要回答的问题是属于哪个范围，跳出范围，往往会带来创意。就像便利店的问题，一般人都能想到其他店铺，但是你只要想到其他店铺之外还有其他未知的范围，那你就可以进一步扩展。直接做范围的思考，就比你脑补一个其他店回答这个问题，能罗列更多答案。\n这个本质就是从更高一级来观察对象，移植到我们日常生活中，就是从以自我为中心，转化到在高处看自己这样的一种旁观者或者上帝视角状态。简言之就是突破自己的局限。\n3.2 跨界类比跨界的本质在于抽象和类推，一种事物和另一种事物，如果你能发现这种不同领域之间的共同点，那么你就容易产生新的创意。这个也非常好理解，高维的东西在不同的低维领域有类似的表现。你想要寻找到它们，就需要你去从不同领域的几种实物之间发现它们的联系，从而掌握高维的本质。这个在书里叫做通过下位概念去理解上位概念。比如说很多人背诵历史的时候，会把很多史诗按照年代死记硬背，但是真正会学的人，会去理解历史上为什么会发生这些事情。人家只要搞清楚上面的原因，下面的就自然而然就记住了。寻找不同史诗之间的联系，然后就能发现历史是什么样子的。\n3.3 凡事多问为什么因为只有为什么可以一直往上追问，从现象问到本质。从低维度问到高维度。从而从高维度另辟蹊径解决问题。书里举了一个例子，很有道理。作者分析站前“老咖啡店”面临的竞争是什么。一般人肯定想得到星巴克，麦当劳这种能喝咖啡的竞争对手。但是如果你会问为什么，就会想为什么他们要喝咖啡呢？那原因就很多了。如果是打发时间，那么手机也是竞争对手，如果是为了约会，那么很多封闭场所都是竞争对手，如果仅仅是为了喝咖啡，那么咖啡机也是竞争对手。这样一分析，很多事情就能想通了。\n我们通过问为什么，就可以追溯到最核心的，高维的理由。那么从商业上来讲，你其实有更多的经营思路会出现，而不仅仅会停留在谁都能想到的一般竞争维度。\n4.一些闪光点的句子\n包括荒诞无稽的事物在内，便利店“不出售的东西”是“应有尽有”的。然而我们听到这样的创意时，却常会做出“这样也行？”的反应 。这正是一种“囿于固定观念”的状态。\n\n无论个人还是企业等组织，通常存在一种误解和盲信，那就是以为“第二个环”的内侧——“已知的未知”和“已知的已知”就是“整个世界”。人们很容易忘记一个至理：人类的未知远超（足有天文学上的差距）已知。为了便于表现，“第三个环”也用线画了出来，但它实际上应该是无限的，是不停膨胀着的，完全可以代表“宇宙的尽头\n\nThere are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns-the ones we don’t know we don ’t know[翻译：首先存在知道自己知道的“已知的已知”（known knowns），然后存在知道自己不知道的“已知的未知”（known unknowns），另外还存在不知道自己不知道的“未知的未知”（unknown un knowns）。]\n\n\n解决问题时，“像打鼹鼠游戏那样”使用对症疗法击碎浮于表面的问题，即使能解决个别问题，只要没能摧毁真正的原因，就一定会发生由相同原因造成的麻烦，所以这种做法并不理想。此时需要做的，是不止一次地、两次三番地问自己：“为什么会发生这样的问题？”如此一来，才能找到存在于更“上游”的真正的根本原因。\n\n“蚂蚁 思维” 与“ 蝈蝈 思维” 的 三个 差异 如图 所示。 第 一点 是“ 存量” 与“ 流量” 的 区别。 主要 的 不同 在于： 是 重视 由 智慧 资产， 即 过去 的 经验 和 知识 积累 的“ 存量”， 还是 重视 用后 就 扔掉 也没 关系 的“ 流量”。\n\n\n","categories":["读书"]},{"title":"java基础","url":"/2021/05/24/java%E5%9F%BA%E7%A1%80/","content":"Java 基础\n\nJava 基础\n一、数据类型\n基本类型\n包装类型\n缓存池\n\n\n二、String\n概览\n不可变的好处\nString, StringBuffer and StringBuilder    \nString Pool\nnew String(“abc”)\n\n\n三、运算\n参数传递\nfloat 与 double\n隐式类型转换\nswitch\n\n\n四、关键字\nfinal\nstatic\n\n\n五、Object 通用方法\n概览\nequals()\nhashCode()\ntoString()\nclone()\n\n\n六、继承\n访问权限\n抽象类与接口\nsuper\n重写与重载\n\n\n七、反射\n八、异常\n九、泛型\n十、注解\n十一、特性\nJava 各版本的新特性\nJava 与 C++ 的区别\nJRE or JDK\n\n\n参考资料\n\n\n\n一、数据类型基本类型\nbyte/8\nchar/16\nshort/16\nint/32\nfloat/32\nlong/64\ndouble/64\nboolean/~\n\nboolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。\n\nPrimitive Data Types\nThe Java® Virtual Machine Specification\n\n包装类型基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\nInteger x = 2;     // 装箱 调用了 Integer.valueOf(2)int y = x;         // 拆箱 调用了 X.intValue()\n\n\nAutoboxing and Unboxing\n\n缓存池new Integer(123) 与 Integer.valueOf(123) 的区别在于：\n\nnew Integer(123) 每次都会新建一个对象；\nInteger.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n\nInteger x = new Integer(123);Integer y = new Integer(123);System.out.println(x == y);    // falseInteger z = Integer.valueOf(123);Integer k = Integer.valueOf(123);System.out.println(z == k);   // true\n\nvalueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\npublic static Integer valueOf(int i) &#123;    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)        return IntegerCache.cache[i + (-IntegerCache.low)];    return new Integer(i);&#125;\n\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\nstatic final int low = -128;static final int high;static final Integer cache[];static &#123;    // high value may be configured by property    int h = 127;    String integerCacheHighPropValue =        sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);    if (integerCacheHighPropValue != null) &#123;        try &#123;            int i = parseInt(integerCacheHighPropValue);            i = Math.max(i, 127);            // Maximum array size is Integer.MAX_VALUE            h = Math.min(i, Integer.MAX_VALUE - (-low) -1);        &#125; catch( NumberFormatException nfe) &#123;            // If the property cannot be parsed into an int, ignore it.        &#125;    &#125;    high = h;    cache = new Integer[(high - low) + 1];    int j = low;    for(int k = 0; k &lt; cache.length; k++)        cache[k] = new Integer(j++);    // range [-128, 127] must be interned (JLS7 5.1.7)    assert IntegerCache.high &gt;= 127;&#125;\n\n编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。\nInteger m = 123;Integer n = 123;System.out.println(m == n); // true\n\n基本类型对应的缓冲池如下：\n\nboolean values true and false\nall byte values\nshort values between -128 and 127\nint values between -128 and 127\nchar in the range \\u0000 to \\u007F\n\n在使用这些基本类型对应的包装类型时，如果该数值范围在缓冲池范围内，就可以直接使用缓冲池中的对象。\n在 jdk 1.8 所有的数值类缓冲池中，Integer 的缓冲池 IntegerCache 很特殊，这个缓冲池的下界是 - 128，上界默认是 127，但是这个上界是可调的，在启动 jvm 的时候，通过 -XX:AutoBoxCacheMax=&lt;size&gt; 来指定这个缓冲池的大小，该选项在 JVM 初始化的时候会设定一个名为 java.lang.IntegerCache.high 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。\nStackOverflow : Differences between new Integer(123), Integer.valueOf(123) and just 123\n\n二、String概览String 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）\n在 Java 8 中，String 内部使用 char 数组存储数据。\npublic final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;    /** The value is used for character storage. */    private final char value[];&#125;\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 coder 来标识使用了哪种编码。\npublic final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;    /** The value is used for character storage. */    private final byte[] value;    /** The identifier of the encoding used to encode the bytes in &#123;@code value&#125;. */    private final byte coder;&#125;\n\nvalue 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\n不可变的好处1. 可以缓存 hash 值  \n因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。\n2. String Pool 的需要  \n如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。\n  \n\n3. 安全性  \nString 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 的那一方以为现在连接的是其它主机，而实际情况却不一定是。\n4. 线程安全  \nString 不可变性天生具备线程安全，可以在多个线程中安全地使用。\nProgram Creek : Why String is immutable in Java?\nString, StringBuffer and StringBuilder1. 可变性  \n\nString 不可变\nStringBuffer 和 StringBuilder 可变\n\n2. 线程安全  \n\nString 不可变，因此是线程安全的\nStringBuilder 不是线程安全的\nStringBuffer 是线程安全的，内部使用 synchronized 进行同步\n\nStackOverflow : String, StringBuffer, and StringBuilder\nString Pool字符串常量池（String Pool）保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool 中。\n当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。\n下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同字符串，而 s3 和 s4 是通过 s1.intern() 和 s2.intern() 方法取得同一个字符串引用。intern() 首先把 “aaa” 放到 String Pool 中，然后返回这个字符串引用，因此 s3 和 s4 引用的是同一个字符串。\nString s1 = new String(&quot;aaa&quot;);String s2 = new String(&quot;aaa&quot;);System.out.println(s1 == s2);           // falseString s3 = s1.intern();String s4 = s2.intern();System.out.println(s3 == s4);           // true\n\n如果是采用 “bbb” 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。\nString s5 = &quot;bbb&quot;;String s6 = &quot;bbb&quot;;System.out.println(s5 == s6);  // true\n\n在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。而在 Java 7，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。\n\nStackOverflow : What is String interning?\n深入解析 String#intern\n\nnew String(“abc”)使用这种方式一共会创建两个字符串对象（前提是 String Pool 中还没有 “abc” 字符串对象）。\n\n“abc” 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 “abc” 字符串字面量；\n而使用 new 的方式会在堆中创建一个字符串对象。\n\n创建一个测试类，其 main 方法中使用这种方式来创建字符串对象。\npublic class NewStringTest &#123;    public static void main(String[] args) &#123;        String s = new String(&quot;abc&quot;);    &#125;&#125;\n\n使用 javap -verbose 进行反编译，得到以下内容：\n// ...Constant pool:// ...   #2 = Class              #18            // java/lang/String   #3 = String             #19            // abc// ...  #18 = Utf8               java/lang/String  #19 = Utf8               abc// ...  public static void main(java.lang.String[]);    descriptor: ([Ljava/lang/String;)V    flags: ACC_PUBLIC, ACC_STATIC    Code:      stack=3, locals=2, args_size=1         0: new           #2                  // class java/lang/String         3: dup         4: ldc           #3                  // String abc         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V         9: astore_1// ...\n\n在 Constant Pool 中，#19 存储这字符串字面量 “abc”，#3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。在 main 方法中，0: 行使用 new #2 在堆中创建一个字符串对象，并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。\n以下是 String 构造函数的源码，可以看到，在将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。\npublic String(String original) &#123;    this.value = original.value;    this.hash = original.hash;&#125;\n\n三、运算参数传递Java 的参数是以值传递的形式传入方法中，而不是引用传递。\n以下代码中 Dog dog 的 dog 是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中。\npublic class Dog &#123;    String name;    Dog(String name) &#123;        this.name = name;    &#125;    String getName() &#123;        return this.name;    &#125;    void setName(String name) &#123;        this.name = name;    &#125;    String getObjectAddress() &#123;        return super.toString();    &#125;&#125;\n\n在方法中改变对象的字段值会改变原对象该字段值，因为引用的是同一个对象。\nclass PassByValueExample &#123;    public static void main(String[] args) &#123;        Dog dog = new Dog(&quot;A&quot;);        func(dog);        System.out.println(dog.getName());          // B    &#125;    private static void func(Dog dog) &#123;        dog.setName(&quot;B&quot;);    &#125;&#125;\n\n但是在方法中将指针引用了其它对象，那么此时方法里和方法外的两个指针指向了不同的对象，在一个指针改变其所指向对象的内容对另一个指针所指向的对象没有影响。\npublic class PassByValueExample &#123;    public static void main(String[] args) &#123;        Dog dog = new Dog(&quot;A&quot;);        System.out.println(dog.getObjectAddress()); // Dog@4554617c        func(dog);        System.out.println(dog.getObjectAddress()); // Dog@4554617c        System.out.println(dog.getName());          // A    &#125;    private static void func(Dog dog) &#123;        System.out.println(dog.getObjectAddress()); // Dog@4554617c        dog = new Dog(&quot;B&quot;);        System.out.println(dog.getObjectAddress()); // Dog@74a14482        System.out.println(dog.getName());          // B    &#125;&#125;\n\nStackOverflow: Is Java “pass-by-reference” or “pass-by-value”?\nfloat 与 doubleJava 不能隐式执行向下转型，因为这会使得精度降低。\n1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。\n// float f = 1.1;\n\n1.1f 字面量才是 float 类型。\nfloat f = 1.1f;\n\n隐式类型转换因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型向下转型为 short 类型。\nshort s1 = 1;// s1 = s1 + 1;\n\n但是使用 += 或者 ++ 运算符会执行隐式类型转换。\ns1 += 1;s1++;\n\n上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：\ns1 = (short) (s1 + 1);\n\nStackOverflow : Why don’t Java’s +=, -=, *=, /= compound assignment operators require casting?\nswitch从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。\nString s = &quot;a&quot;;switch (s) &#123;    case &quot;a&quot;:        System.out.println(&quot;aaa&quot;);        break;    case &quot;b&quot;:        System.out.println(&quot;bbb&quot;);        break;&#125;\n\nswitch 不支持 long、float、double，是因为 switch 的设计初衷是对那些只有少数几个值的类型进行等值判断，如果值过于复杂，那么还是用 if 比较合适。\n// long x = 111;// switch (x) &#123; // Incompatible types. Found: &#x27;long&#x27;, required: &#x27;char, byte, short, int, Character, Byte, Short, Integer, String, or an enum&#x27;//     case 111://         System.out.println(111);//         break;//     case 222://         System.out.println(222);//         break;// &#125;\n\nStackOverflow : Why can’t your switch statement data type be long, Java?\n四、关键字final1. 数据  \n声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\n\n对于基本类型，final 使数值不变；\n对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。\n\nfinal int x = 1;// x = 2;  // cannot assign value to final variable &#x27;x&#x27;final A y = new A();y.a = 1;\n\n2. 方法  \n声明方法不能被子类重写。\nprivate 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\n3. 类  \n声明类不允许被继承。\nstatic1. 静态变量  \n\n静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它。静态变量在内存中只存在一份。\n实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。\n\npublic class A &#123;    private int x;         // 实例变量    private static int y;  // 静态变量    public static void main(String[] args) &#123;        // int x = A.x;  // Non-static field &#x27;x&#x27; cannot be referenced from a static context        A a = new A();        int x = a.x;        int y = A.y;    &#125;&#125;\n\n2. 静态方法  \n静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法。\npublic abstract class A &#123;    public static void func1()&#123;    &#125;    // public abstract static void func2();  // Illegal combination of modifiers: &#x27;abstract&#x27; and &#x27;static&#x27;&#125;\n\n只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。\npublic class A &#123;    private static int x;    private int y;    public static void func1()&#123;        int a = x;        // int b = y;  // Non-static field &#x27;y&#x27; cannot be referenced from a static context        // int b = this.y;     // &#x27;A.this&#x27; cannot be referenced from a static context    &#125;&#125;\n\n3. 静态语句块  \n静态语句块在类初始化时运行一次。\npublic class A &#123;    static &#123;        System.out.println(&quot;123&quot;);    &#125;    public static void main(String[] args) &#123;        A a1 = new A();        A a2 = new A();    &#125;&#125;\n\n123\n\n4. 静态内部类  \n非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。\npublic class OuterClass &#123;    class InnerClass &#123;    &#125;    static class StaticInnerClass &#123;    &#125;    public static void main(String[] args) &#123;        // InnerClass innerClass = new InnerClass(); // &#x27;OuterClass.this&#x27; cannot be referenced from a static context        OuterClass outerClass = new OuterClass();        InnerClass innerClass = outerClass.new InnerClass();        StaticInnerClass staticInnerClass = new StaticInnerClass();    &#125;&#125;\n\n静态内部类不能访问外部类的非静态的变量和方法。\n5. 静态导包  \n在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。\nimport static com.xxx.ClassName.*\n\n6. 初始化顺序  \n静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\npublic static String staticField = &quot;静态变量&quot;;\n\nstatic &#123;    System.out.println(&quot;静态语句块&quot;);&#125;\n\npublic String field = &quot;实例变量&quot;;\n\n&#123;    System.out.println(&quot;普通语句块&quot;);&#125;\n\n最后才是构造函数的初始化。\npublic InitialOrderTest() &#123;    System.out.println(&quot;构造函数&quot;);&#125;\n\n存在继承的情况下，初始化顺序为：\n\n父类（静态变量、静态语句块）\n子类（静态变量、静态语句块）\n父类（实例变量、普通语句块）\n父类（构造函数）\n子类（实例变量、普通语句块）\n子类（构造函数）\n\n五、Object 通用方法概览public native int hashCode()public boolean equals(Object obj)protected native Object clone() throws CloneNotSupportedExceptionpublic String toString()public final native Class&lt;?&gt; getClass()protected void finalize() throws Throwable &#123;&#125;public final native void notify()public final native void notifyAll()public final native void wait(long timeout) throws InterruptedExceptionpublic final void wait(long timeout, int nanos) throws InterruptedExceptionpublic final void wait() throws InterruptedException\n\nequals()1. 等价关系  \n两个对象具有等价关系，需要满足以下五个条件：\nⅠ 自反性\nx.equals(x); // true\n\nⅡ 对称性\nx.equals(y) == y.equals(x); // true\n\nⅢ 传递性\nif (x.equals(y) &amp;&amp; y.equals(z))    x.equals(z); // true;\n\nⅣ 一致性\n多次调用 equals() 方法结果不变\nx.equals(y) == x.equals(y); // true\n\nⅤ 与 null 的比较\n对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false\nx.equals(null); // false;\n\n2. 等价与相等  \n\n对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。\n对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。\n\nInteger x = new Integer(1);Integer y = new Integer(1);System.out.println(x.equals(y)); // trueSystem.out.println(x == y);      // false\n\n3. 实现  \n\n检查是否为同一个对象的引用，如果是直接返回 true；\n检查是否是同一个类型，如果不是，直接返回 false；\n将 Object 对象进行转型；\n判断每个关键域是否相等。\n\npublic class EqualExample &#123;    private int x;    private int y;    private int z;    public EqualExample(int x, int y, int z) &#123;        this.x = x;        this.y = y;        this.z = z;    &#125;    @Override    public boolean equals(Object o) &#123;        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        EqualExample that = (EqualExample) o;        if (x != that.x) return false;        if (y != that.y) return false;        return z == that.z;    &#125;&#125;\n\nhashCode()hashCode() 返回哈希值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价，这是因为计算哈希值具有随机性，两个值不同的对象可能计算出相同的哈希值。\n在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象哈希值也相等。\nHashSet  和 HashMap 等集合类使用了 hashCode()  方法来计算对象应该存储的位置，因此要将对象添加到这些集合类中，需要让对应的类实现 hashCode()  方法。\n下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的，只在集合中添加一个对象。但是 EqualExample 没有实现 hashCode() 方法，因此这两个对象的哈希值是不同的，最终导致集合添加了两个等价的对象。\nEqualExample e1 = new EqualExample(1, 1, 1);EqualExample e2 = new EqualExample(1, 1, 1);System.out.println(e1.equals(e2)); // trueHashSet&lt;EqualExample&gt; set = new HashSet&lt;&gt;();set.add(e1);set.add(e2);System.out.println(set.size());   // 2\n\n理想的哈希函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的哈希值上。这就要求了哈希函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。\nR 一般取 31，因为它是一个奇素数，如果是偶数的话，当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位，最左边的位丢失。并且一个数与 31 相乘可以转换成移位和减法：31*x == (x&lt;&lt;5)-x，编译器会自动进行这个优化。\n@Overridepublic int hashCode() &#123;    int result = 17;    result = 31 * result + x;    result = 31 * result + y;    result = 31 * result + z;    return result;&#125;\n\ntoString()默认返回 ToStringExample@4554617c 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。\npublic class ToStringExample &#123;    private int number;    public ToStringExample(int number) &#123;        this.number = number;    &#125;&#125;\n\nToStringExample example = new ToStringExample(123);System.out.println(example.toString());\n\nToStringExample@4554617c\n\nclone()1. cloneable  \nclone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。\npublic class CloneExample &#123;    private int a;    private int b;&#125;\n\nCloneExample e1 = new CloneExample();// CloneExample e2 = e1.clone(); // &#x27;clone()&#x27; has protected access in &#x27;java.lang.Object&#x27;\n\n重写 clone() 得到以下实现：\npublic class CloneExample &#123;    private int a;    private int b;    @Override    public CloneExample clone() throws CloneNotSupportedException &#123;        return (CloneExample)super.clone();    &#125;&#125;\n\nCloneExample e1 = new CloneExample();try &#123;    CloneExample e2 = e1.clone();&#125; catch (CloneNotSupportedException e) &#123;    e.printStackTrace();&#125;\n\njava.lang.CloneNotSupportedException: CloneExample\n\n以上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。\n应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。\npublic class CloneExample implements Cloneable &#123;    private int a;    private int b;    @Override    public Object clone() throws CloneNotSupportedException &#123;        return super.clone();    &#125;&#125;\n\n2. 浅拷贝  \n拷贝对象和原始对象的引用类型引用同一个对象。\npublic class ShallowCloneExample implements Cloneable &#123;    private int[] arr;    public ShallowCloneExample() &#123;        arr = new int[10];        for (int i = 0; i &lt; arr.length; i++) &#123;            arr[i] = i;        &#125;    &#125;    public void set(int index, int value) &#123;        arr[index] = value;    &#125;    public int get(int index) &#123;        return arr[index];    &#125;    @Override    protected ShallowCloneExample clone() throws CloneNotSupportedException &#123;        return (ShallowCloneExample) super.clone();    &#125;&#125;\n\nShallowCloneExample e1 = new ShallowCloneExample();ShallowCloneExample e2 = null;try &#123;    e2 = e1.clone();&#125; catch (CloneNotSupportedException e) &#123;    e.printStackTrace();&#125;e1.set(2, 222);System.out.println(e2.get(2)); // 222\n\n3. 深拷贝  \n拷贝对象和原始对象的引用类型引用不同对象。\npublic class DeepCloneExample implements Cloneable &#123;    private int[] arr;    public DeepCloneExample() &#123;        arr = new int[10];        for (int i = 0; i &lt; arr.length; i++) &#123;            arr[i] = i;        &#125;    &#125;    public void set(int index, int value) &#123;        arr[index] = value;    &#125;    public int get(int index) &#123;        return arr[index];    &#125;    @Override    protected DeepCloneExample clone() throws CloneNotSupportedException &#123;        DeepCloneExample result = (DeepCloneExample) super.clone();        result.arr = new int[arr.length];        for (int i = 0; i &lt; arr.length; i++) &#123;            result.arr[i] = arr[i];        &#125;        return result;    &#125;&#125;\n\nDeepCloneExample e1 = new DeepCloneExample();DeepCloneExample e2 = null;try &#123;    e2 = e1.clone();&#125; catch (CloneNotSupportedException e) &#123;    e.printStackTrace();&#125;e1.set(2, 222);System.out.println(e2.get(2)); // 2\n\n4. clone() 的替代方案  \n使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。\npublic class CloneConstructorExample &#123;    private int[] arr;    public CloneConstructorExample() &#123;        arr = new int[10];        for (int i = 0; i &lt; arr.length; i++) &#123;            arr[i] = i;        &#125;    &#125;    public CloneConstructorExample(CloneConstructorExample original) &#123;        arr = new int[original.arr.length];        for (int i = 0; i &lt; original.arr.length; i++) &#123;            arr[i] = original.arr[i];        &#125;    &#125;    public void set(int index, int value) &#123;        arr[index] = value;    &#125;    public int get(int index) &#123;        return arr[index];    &#125;&#125;\n\nCloneConstructorExample e1 = new CloneConstructorExample();CloneConstructorExample e2 = new CloneConstructorExample(e1);e1.set(2, 222);System.out.println(e2.get(2)); // 2\n\n六、继承访问权限Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。\n可以对类或类中的成员（字段和方法）加上访问修饰符。\n\n类可见表示其它类可以用这个类创建实例对象。\n成员可见表示其它类可以用这个类的实例对象访问到该成员；\n\nprotected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。\n设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。\n如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例去代替，也就是确保满足里氏替换原则。\n字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 公有字段，如果在某个时刻，我们想要使用 int 存储 id 字段，那么就需要修改所有的客户端代码。\npublic class AccessExample &#123;    public String id;&#125;\n\n可以使用公有的 getter 和 setter 方法来替换公有字段，这样的话就可以控制对字段的修改行为。\npublic class AccessExample &#123;    private int id;    public String getId() &#123;        return id + &quot;&quot;;    &#125;    public void setId(String id) &#123;        this.id = Integer.valueOf(id);    &#125;&#125;\n\n但是也有例外，如果是包级私有的类或者私有的嵌套类，那么直接暴露成员不会有特别大的影响。\npublic class AccessWithInnerClassExample &#123;    private class InnerClass &#123;        int x;    &#125;    private InnerClass innerClass;    public AccessWithInnerClassExample() &#123;        innerClass = new InnerClass();    &#125;    public int getValue() &#123;        return innerClass.x;  // 直接访问    &#125;&#125;\n\n抽象类与接口1. 抽象类  \n抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。\n抽象类和普通类最大的区别是，抽象类不能被实例化，只能被继承。\npublic abstract class AbstractClassExample &#123;    protected int x;    private int y;    public abstract void func1();    public void func2() &#123;        System.out.println(&quot;func2&quot;);    &#125;&#125;\n\npublic class AbstractExtendClassExample extends AbstractClassExample &#123;    @Override    public void func1() &#123;        System.out.println(&quot;func1&quot;);    &#125;&#125;\n\n// AbstractClassExample ac1 = new AbstractClassExample(); // &#x27;AbstractClassExample&#x27; is abstract; cannot be instantiatedAbstractClassExample ac2 = new AbstractExtendClassExample();ac2.func1();\n\n2. 接口  \n接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。\n从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类，让它们都实现新增的方法。\n接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。从 Java 9 开始，允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。\n接口的字段默认都是 static 和 final 的。\npublic interface InterfaceExample &#123;    void func1();    default void func2()&#123;        System.out.println(&quot;func2&quot;);    &#125;    int x = 123;    // int y;               // Variable &#x27;y&#x27; might not have been initialized    public int z = 0;       // Modifier &#x27;public&#x27; is redundant for interface fields    // private int k = 0;   // Modifier &#x27;private&#x27; not allowed here    // protected int l = 0; // Modifier &#x27;protected&#x27; not allowed here    // private void fun3(); // Modifier &#x27;private&#x27; not allowed here&#125;\n\npublic class InterfaceImplementExample implements InterfaceExample &#123;    @Override    public void func1() &#123;        System.out.println(&quot;func1&quot;);    &#125;&#125;\n\n// InterfaceExample ie1 = new InterfaceExample(); // &#x27;InterfaceExample&#x27; is abstract; cannot be instantiatedInterfaceExample ie2 = new InterfaceImplementExample();ie2.func1();System.out.println(InterfaceExample.x);\n\n3. 比较  \n\n从设计层面上看，抽象类提供了一种 IS-A 关系，需要满足里式替换原则，即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。\n从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。\n接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\n接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。\n\n4. 使用选择  \n使用接口：\n\n需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Comparable 接口中的 compareTo() 方法；\n需要使用多重继承。\n\n使用抽象类：\n\n需要在几个相关的类中共享代码。\n需要能控制继承来的成员的访问权限，而不是都为 public。\n需要继承非静态和非常量字段。\n\n在很多情况下，接口优先于抽象类。因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。\n\nAbstract Methods and Classes\n深入理解 abstract class 和 interface\nWhen to Use Abstract Class and Interface\nJava 9 Private Methods in Interfaces\n\nsuper\n访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。应该注意到，子类一定会调用父类的构造函数来完成初始化工作，一般是调用父类的默认构造函数，如果子类需要调用父类其它构造函数，那么就可以使用 super() 函数。\n访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。\n\npublic class SuperExample &#123;    protected int x;    protected int y;    public SuperExample(int x, int y) &#123;        this.x = x;        this.y = y;    &#125;    public void func() &#123;        System.out.println(&quot;SuperExample.func()&quot;);    &#125;&#125;\n\npublic class SuperExtendExample extends SuperExample &#123;    private int z;    public SuperExtendExample(int x, int y, int z) &#123;        super(x, y);        this.z = z;    &#125;    @Override    public void func() &#123;        super.func();        System.out.println(&quot;SuperExtendExample.func()&quot;);    &#125;&#125;\n\nSuperExample e = new SuperExtendExample(1, 2, 3);e.func();\n\nSuperExample.func()SuperExtendExample.func()\n\nUsing the Keyword super\n重写与重载1. 重写（Override）  \n存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\n为了满足里式替换原则，重写有以下三个限制：\n\n子类方法的访问权限必须大于等于父类方法；\n子类方法的返回类型必须是父类方法返回类型或为其子类型。\n子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。\n\n使用 @Override 注解，可以让编译器帮忙检查是否满足上面的三个限制条件。\n下面的示例中，SubClass 为 SuperClass 的子类，SubClass 重写了 SuperClass 的 func() 方法。其中：\n\n子类方法访问权限为 public，大于父类的 protected。\n子类的返回类型为 ArrayList&lt;Integer&gt;，是父类返回类型 List&lt;Integer&gt; 的子类。\n子类抛出的异常类型为 Exception，是父类抛出异常 Throwable 的子类。\n子类重写方法使用 @Override 注解，从而让编译器自动检查是否满足限制条件。\n\nclass SuperClass &#123;    protected List&lt;Integer&gt; func() throws Throwable &#123;        return new ArrayList&lt;&gt;();    &#125;&#125;class SubClass extends SuperClass &#123;    @Override    public ArrayList&lt;Integer&gt; func() throws Exception &#123;        return new ArrayList&lt;&gt;();    &#125;&#125;\n\n在调用一个方法时，先从本类中查找看是否有对应的方法，如果没有再到父类中查看，看是否从父类继承来。否则就要对参数进行转型，转成父类之后看是否有对应的方法。总的来说，方法调用的优先级为：\n\nthis.func(this)\nsuper.func(this)\nthis.func(super)\nsuper.func(super)\n\n/*    A    |    B    |    C    |    D */class A &#123;    public void show(A obj) &#123;        System.out.println(&quot;A.show(A)&quot;);    &#125;    public void show(C obj) &#123;        System.out.println(&quot;A.show(C)&quot;);    &#125;&#125;class B extends A &#123;    @Override    public void show(A obj) &#123;        System.out.println(&quot;B.show(A)&quot;);    &#125;&#125;class C extends B &#123;&#125;class D extends C &#123;&#125;\n\npublic static void main(String[] args) &#123;    A a = new A();    B b = new B();    C c = new C();    D d = new D();    // 在 A 中存在 show(A obj)，直接调用    a.show(a); // A.show(A)    // 在 A 中不存在 show(B obj)，将 B 转型成其父类 A    a.show(b); // A.show(A)    // 在 B 中存在从 A 继承来的 show(C obj)，直接调用    b.show(c); // A.show(C)    // 在 B 中不存在 show(D obj)，但是存在从 A 继承来的 show(C obj)，将 D 转型成其父类 C    b.show(d); // A.show(C)    // 引用的还是 B 对象，所以 ba 和 b 的调用结果一样    A ba = new B();    ba.show(c); // A.show(C)    ba.show(d); // A.show(C)&#125;\n\n2. 重载（Overload）  \n存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\n应该注意的是，返回值不同，其它都相同不算是重载。\nclass OverloadingExample &#123;    public void show(int x) &#123;        System.out.println(x);    &#125;    public void show(int x, String y) &#123;        System.out.println(x + &quot; &quot; + y);    &#125;&#125;\n\npublic static void main(String[] args) &#123;    OverloadingExample example = new OverloadingExample();    example.show(1);    example.show(1, &quot;2&quot;);&#125;\n\n七、反射每个类都有一个   Class   对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。\n类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 Class.forName(&quot;com.mysql.jdbc.Driver&quot;) 这种方式来控制类的加载，该方法会返回一个 Class 对象。\n反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。\nClass 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：\n\n Field  ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\n Method  ：可以使用 invoke() 方法调用与 Method 对象关联的方法；\n Constructor  ：可以用 Constructor 的 newInstance() 创建新的对象。\n\n反射的优点：  \n\n 可扩展性   ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。\n 类浏览器和可视化开发环境   ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。\n 调试器和测试工具   ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。\n\n反射的缺点：  \n尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。\n\n 性能开销   ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。\n\n 安全限制   ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。\n\n 内部暴露   ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。\n\nTrail: The Reflection API\n\n深入解析 Java 反射（1）- 基础\n\n\n八、异常Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：  Error   和 Exception。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种：\n\n  受检异常  ：需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；\n  非受检异常  ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。\n\n  \n\n\nJava Exception Interview Questions and Answers\n\nJava提高篇——Java 异常处理\n\n\n九、泛型public class Box&lt;T&gt; &#123;    // T stands for &quot;Type&quot;    private T t;    public void set(T t) &#123; this.t = t; &#125;    public T get() &#123; return t; &#125;&#125;\n\n\nJava 泛型详解\n10 道 Java 泛型面试题\n\n十、注解Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。\n注解 Annotation 实现原理与自定义注解例子\n十一、特性Java 各版本的新特性New highlights in Java SE 8  \n\nLambda Expressions\nPipelines and Streams\nDate and Time API\nDefault Methods\nType Annotations\nNashhorn JavaScript Engine\nConcurrent Accumulators\nParallel operations\nPermGen Error Removed\n\nNew highlights in Java SE 7  \n\nStrings in Switch Statement\nType Inference for Generic Instance Creation\nMultiple Exception Handling\nSupport for Dynamic Languages\nTry with Resources\nJava nio Package\nBinary Literals, Underscore in literals\nDiamond Syntax\n\n\nDifference between Java 1.8 and Java 1.7?\nJava 8 特性\n\nJava 与 C++ 的区别\nJava 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。\nJava 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。\nJava 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\nJava 支持自动垃圾回收，而 C++ 需要手动回收。\nJava 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\nJava 不支持操作符重载，虽然可以对两个 String 对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。\nJava 的 goto 是保留字，但是不可用，C++ 可以使用 goto。\n\nWhat are the main differences between Java and C++?\nJRE or JDK\nJRE：Java Runtime Environment，Java 运行环境的简称，为 Java 的运行提供了所需的环境。它是一个 JVM 程序，主要包括了 JVM 的标准实现和一些 Java 基本类库。\nJDK：Java Development Kit，Java 开发工具包，提供了 Java 的开发及运行环境。JDK 是 Java 开发的核心，集成了 JRE 以及一些其它的工具，比如编译 Java 源码的编译器 javac 等。\n\n参考资料\nEckel B. Java 编程思想[M]. 机械工业出版社, 2002.\nBloch J. Effective java[M]. Addison-Wesley Professional, 2017.\n\n","categories":["java"],"tags":["java"]}]