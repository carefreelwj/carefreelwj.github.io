[{"title":"springboot学习笔记","url":"/2021/05/19/springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"1. Spring Boot概述目标：了解Spring Boot是什么，有什么作用\n小结：\nSpring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；实现开发人员把时间都集中在业务开发上。\n2. Spring Boot入门目标：能够使用Spring Boot搭建项目\n分析：\n需求：可以在浏览器中访问http://localhost:8080/hello输出一串字符\n实现步骤：\n\n创建工程；\n添加依赖（启动器依赖，spring-boot-starter-web）；\n创建启动类；\n创建处理器Controller；\n测试\n\n小结：\nSpring Boot工程可以通过添加启动器依赖和创建启动引导类实现快速创建web工程。\n\nspring-boot-starter-web默认的应用服务器端口是8080\n\n3. Java代码方式配置目标：可以使用@Value获取配置文件配置项并结合@Bean注册组件到Spring\n分析：\n需求：使用Java代码配置数据库连接池，并可以在处理器中注入并使用\n步骤：\n\n添加依赖；\n创建数据库；\n创建数据库连接参数的配置文件jdbc.properties；\n创建配置类；\n改造处理器类注入数据源并使用\n\n小结：\npackage com.itheima.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.PropertySource;import javax.sql.DataSource;@Configuration@PropertySource(&quot;classpath:jdbc.properties&quot;)public class JdbcConfig &#123;    @Value(&quot;$&#123;jdbc.url&#125;&quot;)    String url;    @Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)    String driverClassName;    @Value(&quot;$&#123;jdbc.username&#125;&quot;)    String username;    @Value(&quot;$&#123;jdbc.password&#125;&quot;)    String password;    @Bean    public DataSource dataSource()&#123;        DruidDataSource dataSource = new DruidDataSource();        dataSource.setDriverClassName(driverClassName);        dataSource.setUrl(url);        dataSource.setUsername(username);        dataSource.setPassword(password);        return dataSource;    &#125;&#125;\n\n\n\n4. Spring Boot属性注入方式目标：能够使用@ConfigurationProperties实现Spring Boot配置文件配置项读取和应用\n分析：\n需求：将配置文件中的配置项读取到一个对象中；\n实现：可以使用Spring Boot提供的注解@ConfigurationProperties，该注解可以将Spring Boot的配置文件（默认必须为application.properties或application.yml）中的配置项读取到一个对象中。\n实现步骤：\n\n创建配置项类JdbcProperties类，在该类名上面添加@ConfigurationProperties；\n将jdbc.properties修改名称为application.properties；\n将JdbcProperties对象注入到JdbcConfig；\n测试\n\n小结：\n\n使用@ConfigurationProperties编写配置项类将配置文件中的配置项设置到对象中\n\n@ConfigurationProperties(prefix = &quot;jdbc&quot;)public class JdbcProperties &#123;    private String url;    private String driverClassName;    private String username;    private String password;    public String getUrl() &#123;        return url;    &#125;    public void setUrl(String url) &#123;        this.url = url;    &#125;    public String getDriverClassName() &#123;        return driverClassName;    &#125;    public void setDriverClassName(String driverClassName) &#123;        this.driverClassName = driverClassName;    &#125;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;&#125;\n\n\n\n\n使用@ConfigurationProperties在方法上面使用\n\n@Bean@ConfigurationProperties(prefix = &quot;jdbc&quot;)public DataSource dataSource() &#123;    return new DruidDataSource();&#125;\n\n\n\n5. 多个yml文件配置目标：可以将多个yml文件在application.yml文件中配置激活\n分析：\nyaml与properties配置文件除了展示形式不相同以外，其它功能和作用都是一样的；在项目中原路的读取方式不需要改变。\n1）yml配置文件的特征：\n\n树状层级结构展示配置项；\n配置项之间如果有关系的话需要分行空两格；\n配置项如果有值的话，那么需要在 :之后空一格再写配置项值；\n\n将application.properties配置文件修改为application.yml的话：\njdbc:  driverClassName: com.mysql.jdbc.Driver  url: jdbc:mysql://127.0.0.1:3306/heima  username: root  password: rootkey:  abc: cba  def:    - g    - h    - j\n\n\n\n2）多个yml配置文件；在spring boot中是被允许的。这些配置文件的名称必须为application-***.yml，并且这些配置文件必须要在application.yml配置文件中激活之后才可以使用。\n3）如果properties和yml配置文件同时存在在spring boot项目中；那么这两类配置文件都有效。在两个配置文件中如果存在同名的配置项的话会以properties文件的为主。\n小结：\n在多个配置文件时，需要将这些文件在application.yml文件中进行激活：\n#激活配置文件;需要指定其它的配置文件名称spring:  profiles:    active: abc,def\n\n\n\n6. 自动配置原理目标：了解Spring Boot项目的配置加载流程\n小结：\n\n在 META-INF\\spring.fatories文件中定义了很多自动配置类；可以根据在pom.xml文件中添加的 启动器依赖自动配置组件\n通过如下流程可以去修改application配置文件，改变自动配置的组件默认参数\n\n\n7. lombok应用目标：使用lombok的注解实现pojo类的简化\n分析：\n使用Spring Boot整合SSM工程；需要使用到数据库数据。\n\n将数据库表数据导入到数据库中（springboot_test）；\n\n编写数据库表对应的实体类；一般情况下需要编写get/set/toString等这些方法会耗时并且会让实体类看起来比较臃肿。可以使用lombok插件对实体类进行简化。\nlombok是一个插件工具类包；提供了一些注解@Data、@Getter等这些注解去简化实体类中的构造方法、get/set等方法的编写。\n\n在IDEA中安装lombok插件；\n添加lombok对应的依赖到项目pom.xml文件；\n改造实体类使用lombok注解\n\n\n\n小结：\n在Bean上使用：@Data ：自动提供getter和setter、hashCode、equals、toString等方法@Getter：自动提供getter方法@Setter：自动提供setter方法@Slf4j：自动在bean中提供log变量，其实用的是slf4j的日志功能。\n8. Spring Boot整合-SpringMVC端口和静态资源目标：可以修改tomcat的端口和访问项目中的静态资源\n分析：\n\n修改tomcat端口\n查询**Properties，设置配置项（前缀+类变量名）到application配置文件中\n\n访问项目中的静态资源\n静态资源放置的位置；放置静态资源并访问这些资源\n\n\n小结：\n\n修改项目tomcat端口：\n\n#tomcat端口server:  port: 80\n\n\n在spring boot项目中静态资源可以放置在如下目录：\n \n\n\n9.Spring Boot整合-SpringMVC拦截器目标：可以在Spring Boot项目中配置自定义SpringMVC拦截器\n分析：\n\n编写拦截器（实现HandlerInterceptor）；\n编写配置类实现 WebMvcConfigurer，在该类中添加各种组件；\n测试\n\n小结：\n可以在spring boot项目中通过配置类添加各种组件；如果要添加拦截器的话：\npackage com.itheima.config;import com.itheima.interceptor.MyInterceptor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class MvcConfig implements WebMvcConfigurer &#123;    //注册拦截器    @Bean    public MyInterceptor myInterceptor()&#123;        return new MyInterceptor();    &#125;    //添加拦截器到spring mvc拦截器链    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        registry.addInterceptor(myInterceptor()).addPathPatterns(&quot;/*&quot;);    &#125;&#125;\n\n\n\n10. Spring Boot整合-事务和连接池目标：配置Spring Boot自带默认的hikari数据库连接池和使用@Transactional注解进行事务配置\n分析：\n\n事务配置\n\n添加事务相关的启动器依赖，mysql相关依赖；\n编写业务类UserService使用事务注解@Transactional\n\n\n数据库连接池hikari配置\n只需要在application配置文件中指定数据库相关参数\n\n\n小结：\n\n事务配置；只需要添加jdbc启动器依赖\n数据库连接池使用默认的hikari，在配置文件中配置如下：\n\nspring:  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://127.0.0.1:3306/springboot_test    username: root    password: root\n\n\n\n11. Spring Boot整合-Mybatis目标：配置Mybatis在Spring Boot工程中的整合包，设置mybatis的实体类别名，输出执行sql语句配置项\n分析：\n\n添加启动器依赖；\n配置Mybatis：实体类别名包，日志，映射文件等；\n配置MapperScan\n\n小结：\n\n添加mybatis官方对于spring boot的一个启动器\n&lt;!--mybatis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;2.0.1&lt;/version&gt;&lt;/dependency&gt;  \n配置mybatis\nmybatis:  # 实体类别名包路径  type-aliases-package: com.itheima.pojo  # 映射文件路径  # mapper-locations: classpath:mappers/*.xml  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n设置启动器类中的mapper扫描\n \n\n\n12. Spring Boot整合-通用Mapper目标：配置通用Mapper组件到Spring Boot项目中并使用Mapper接口\n分析：\n通用Mapper：可以实现自动拼接sql语句；所有的mapper都不需要编写任何方法也就是不用编写sql语句。可以提高开发效率。\n\n添加启动器依赖；\n改造UserMapper继承Mapper；\n修改启动引导类Application中的Mapper扫描注解；\n修改User实体类添加jpa注解；\n改造UserService实现业务功能；\n\n小结：\n\n在启动引导类上面的mapper扫描注解 一定要修改为 通用mapper的扫描注解\n\n13. Spring Boot整合测试目标：可以访问处理器对应路径将数据库中的数据根据id查询\n分析：\n\n改造HelloController，注入UserService利用其方法实现查询；\n启动项目进行测试 http://localhost/user/用户id –&gt; http://localhost/user/8\n\n小结：\n修改了HelloController：\n@Autowiredprivate UserService userService;/** * 根据用户id查询用户 * @param id 用户id * @return 用户 */@GetMapping(&quot;/user/&#123;id&#125;&quot;)public User queryById(@PathVariable Long id)&#123;    return userService.queryById(id);&#125;\n\n\n\n14. Spring Boot整合-Junit目标：在Spring Boot项目中使用Junit进行单元测试UserService的方法\n分析：\n\n添加启动器依赖spring-boot-starter-test；\n编写测试类\n\n小结：\n@RunWith(SpringRunner.class)@SpringBootTestpublic class UserServiceTest &#123;    @Autowired    private UserService userService;    @Test    public void queryById() &#123;        User user = userService.queryById(8L);        System.out.println(&quot;user = &quot; + user);    &#125;    @Test    public void saveUser() &#123;        User user = new User();        user.setUserName(&quot;test2&quot;);        user.setName(&quot;test2&quot;);        user.setAge(13);        user.setPassword(&quot;123456&quot;);        user.setSex(1);        user.setCreated(new Date());        userService.saveUser(user);    &#125;&#125;\n\n\n在Spring Boot项目中如果编写测试类则必须要在类上面添加@SpringBootTest\n\n15. Spring Boot整合-redis目标：在Spring Boot项目中使用Junit测试RedisTemplate的使用\n分析：\n\n添加启动器依赖；spring-boot-starter-data-redis\n配置application.yml中修改redis的连接参数；（redis需要启动）\n编写测试类应用RedisTemplate操作redis中的5种数据类型（string/hash/list/set/sorted set）\n\n小结：\n@RunWith(SpringRunner.class)@SpringBootTestpublic class RedisTest &#123;    @Autowired    private RedisTemplate redisTemplate;    @Test    public void test()&#123;        //string 字符串        //redisTemplate.opsForValue().set(&quot;str&quot;, &quot;heima&quot;);        redisTemplate.boundValueOps(&quot;str&quot;).set(&quot;heima&quot;);        System.out.println(&quot;str = &quot; + redisTemplate.opsForValue().get(&quot;str&quot;));        //hash 散列        redisTemplate.boundHashOps(&quot;h_key&quot;).put(&quot;name&quot;, &quot;heima&quot;);        redisTemplate.boundHashOps(&quot;h_key&quot;).put(&quot;age&quot;, 13);        //获取所有域        Set set = redisTemplate.boundHashOps(&quot;h_key&quot;).keys();        System.out.println(&quot; hash散列的所有域：&quot; + set);        //获取所有值        List list = redisTemplate.boundHashOps(&quot;h_key&quot;).values();        System.out.println(&quot; hash散列的所有域的值：&quot; + list);        //list 列表        redisTemplate.boundListOps(&quot;l_key&quot;).leftPush(&quot;c&quot;);        redisTemplate.boundListOps(&quot;l_key&quot;).leftPush(&quot;b&quot;);        redisTemplate.boundListOps(&quot;l_key&quot;).leftPush(&quot;a&quot;);        //获取全部元素        list = redisTemplate.boundListOps(&quot;l_key&quot;).range(0, -1);        System.out.println(&quot; list列表中的所有元素：&quot; + list);        // set 集合        redisTemplate.boundSetOps(&quot;s_key&quot;).add(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);        set = redisTemplate.boundSetOps(&quot;s_key&quot;).members();        System.out.println(&quot; set集合中的所有元素：&quot; + set);        // sorted set 有序集合        redisTemplate.boundZSetOps(&quot;z_key&quot;).add(&quot;a&quot;, 30);        redisTemplate.boundZSetOps(&quot;z_key&quot;).add(&quot;b&quot;, 20);        redisTemplate.boundZSetOps(&quot;z_key&quot;).add(&quot;c&quot;, 10);        set = redisTemplate.boundZSetOps(&quot;z_key&quot;).range(0, -1);        System.out.println(&quot; zset有序集合中的所有元素：&quot; + set);    &#125;&#125;\n\n\n\n16. Spring Boot项目部署目标：将Spring Boot项目使用maven指令打成jar包并运行测试\n分析：\n\n需要添加打包组件将项目中的资源、配置、依赖包打到一个jar包中；可以使用maven的package；\n部署：java -jar 包名\n\n小结：\n\n添加打包组件\n&lt;build&gt;    &lt;plugins&gt;       &lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;\n部署运行\njava -jar 包名\n\n","categories":["java框架学习"],"tags":["java"]},{"title":"related","url":"/2021/05/19/%E5%A7%BF%E6%80%81%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/","content":"A. 解决视频帧之间的时间依赖和几何一致性的方法employ recurrent neural networks (RNNs) such as Long Short Term Memory (LSTM), Gate Recurrent Unit (GRU) or 3DCNNs to model geometric consistency as well as temporal dependency across video frames.\n使用循环神经网络(RNNs)，如长期记忆(LSTM)，门循环单元(GRU)或3DCNNs来建模几何一致性以及视频帧之间的时间依赖性。\n1. Lstm pose machines使用卷积LSTM捕捉时间和空间线索，并直接预测视频的关键点热图序列。这种基于RNN的方法在人体空间稀疏的情况下更有效，例如在单人场景中具有最小的遮挡。然而，在多人姿态估计中经常出现遮挡的情况下，甚至在单人情况下出现严重遮挡时，极易影响算法的性能。\n2. Combining detection and tracking for human pose estimation in videos.提出了一个3DHRNet (HRNet的扩展，包括时间维度)，用于跨视频帧提取空间和时间特征以估计姿态序列。这个模型已经显示了出色的结果，特别是对于足够长的持续时间的单人序列。\n3. Thin-slicing network: A deep structured model for pose estimation in videos.建议计算每两帧之间的密集光流，并利用附加的基于流的表示来对齐预测。\n4. Flowing convnets for human pose estimation in videos.建议计算每两帧之间的密集光流，并利用附加的基于流的表示来对齐预测。\n5.Learning temporal pose estimation from sparsely-labeled videos提出通过翘曲机制从稀疏标记的视频中学习一个有效的视频姿态检测器\nB. 基于图像的姿态估计1.早期\nHuman pose estimation with iterative error feedback. 通过回归图像特征直接输出骨骼关节坐标\nStacked hourglass networks for human pose estimation.利用概率热图来表示节点位置。\n\n3.Bottom-Up自底向上的方法首先检测个体的身体部位，然后将这些组成部分组装成整个人。\n\nRealtime multi-person 2d pose estimation using part affinity fields. 构建一个自底向上的管道，并利用部件关联字段来捕获不同主体部件之间的成对关系。\nFast multi-person pose estimation using pose residual network. \nPifpaf: Composite fields for human pose estimation.\nCrowdpose: Efficient crowded scenes pose estimation and a new benchmark\n\n4.Top-Down自上而下的方法首先进行人的检测，然后对每个个体进行单人姿态估计。\n\nConvolutional pose machines.提出了一种卷积位姿机的顺序架构，该架构遵循迭代精炼每个网络阶段输出的策略。\nRmpe: Regional multi-person pose estimation.设计一个对称的空间变压器网络，从一个不准确的包围框中提取高质量的单人区域。\nDeep high-resolution representation learning for human pose estimation. 最近的一项工作提出了一个HRNet，它执行多尺度融合来保留高分辨率的特征。这提高了关键热图的空间精度，并在几个基于图像的基准上达到了最先进的水平。\n\n5.Top-Down VS Bottom-Up图像姿态：通过利用鲁棒的人检测器，top-down可以专注于边界盒区域内的联合检测任务，而不必处理自底向上方法所做的大规模变化和将关节分组成人的问题。\n视频姿态：自顶向下的方法在视频上的表现并不好，最近被自底向上的方法[25]所超越。因为在视频中检测人的边界框比在图像中检测要困难得多。虽然图像经常捕捉人们“摆姿势”，视频固有地包含非典型类型的遮挡、视点、运动模糊和姿态，使目标检测器偶尔失败\nC. 视频级的时间信息1.动机[Deep Dual Consecutive Network for Human Pose Estimation 3.1]1)尽管现有的姿态估计方法(如[33,12])在视频上的性能下降，但我们观察到，它们的预测仍然为逼近关键点的空间位置提供了有用的信息。\n2)时间一致性，即个体的姿态不会在很少的帧间隔(通常是1/60到1/25秒)中经历戏剧性和突然的变化。\n2.任务多人人体姿态跟踪是检测所有视频帧中所有人的身体关节并随着时间正确连接的双重任务。\n","categories":["姿态估计"],"tags":["神经网络 深度学习"]},{"title":"摄像头API调研","url":"/2021/05/20/%E6%91%84%E5%83%8F%E5%A4%B4API%E8%B0%83%E7%A0%94/","content":"1.华为云视频接入服务该服务提供实时视频数据接入功能，包括摄像头视频数据采集、实时数据分发和视频数据转储等能力。借助视频接入服务，您可以与华为云视频分析服务集成，快速构建基于实时视频数据的智能分析应用。\na.视频接入服务视频接入服务（Video Ingestion Service，简称VIS）是华为云提供的实时视频数据接入服务，提供了摄像头视频数据采集、实时数据分发和视频数据转储等能力。借助视频接入服务，您可以与华为云视频分析服务集成，快速构建基于实时视频数据的智能分析应用。\n\n视频接入服务支持一下类型：\n\n视频流：支持RTMP和HTTP-FLV类型的视频流，视频流编码格式支持H264。\n设备：支持GB28181摄像设备接入，视频流编码格式支持H264、H265。\n\n使用场景广泛，包括智慧园区监控、智慧城市安防\n智慧园区监控园区大量使用门禁闸机、摄像头等设备实现安全管理，VIS提供了便捷的视频流管理，与华为EI视频分析服务（Video Analysis Service，VAS）对接，助力智慧园区应用的开发和运维。\n\n便捷易用：快速建立界面可视化的多路视频流管理。\n多协议支持：通过GB28181、RTMP协议自动收集和传输视频流数据。\nAI应用：利用人脸识别、视频分析服务实现智慧园区应用。\n\n\n智慧城市安防VIS高效收集和传输城市安防产生的大量视频流数据，持久化存储，并与视频分析服务对接，实现快速分析处理。\n\n多协议支持：通过GB28181协议实现摄像设备管理、视频流收集传输。\nAI应用：使用人脸识别、视频分析、ModelArts服务进行智能分析处理。\n\n\nb.API概览1.视频流管理\n\n创建视频流：该接口用于创建视频流。\n更新视频流：该接口用于更新视频流的详情，包括RTMP以及HTTP-FLV类型视频流。对于GB28181设备自动关联的视频流，不能通过该接口进行更新。\n删除视频流：此接口用于删除指定视频流。\n更新转储信息：此接口用于更新视频转储信息。创建的视频流默认没有转储信息，即视频数据不会保存。更新转储信息后可以将视频流保存到指定的存储媒介，如OBS。后续用户可以从OBS上获取到转储的视频。\n获取视频流信息：此接口用于获取指定视频流的详细信息。\n获取视频流列表：此接口用于获取所有视频流的详细信息。\n获取视频流地址：此接口用于获取指定视频流的地址。该地址用于进行视频流推流或者拉流。\n\n2.设备指标统计\n\n获取曾经上线设备列表:该接口用于获取曾经上线的GB28181设备列表，即只要上线过的设备信息都会显示。\n获取新上线设备列表:该接口用于获取今天新上线（即之前没有上线记录）的GB28181设备列表。\n获取视频包接收率:该接口用于获取当天有视频接入的GB28181设备的平均视频包接受率的列表。\n\n2. 海康威视摄像机的二次开发设备必须满足的要求：\n\n支持二次开发\n支持无线联网\n像素能看\n价钱合适\n\n综合以上指标最后选定：DS-2DC2204IW-DE3/W\n\na. 摄像头的激活新购买的设备需要通过 SADP工具 激活。\n激活的过程：\n设备上电，并连接局域网下载 SADP工具，并安装在同一个局域网的电脑上，打开工具，搜索到的设备是“未激活”状态。输入新密码、确认密码，点击 激活，激活成功后，设备状态变为“激活”状态，并且可以修改设备的网络参数(IP，PORT) 设备已经激活完毕，并且设备的IP、端口、用户名(默认用户是 admin)、密码均已设置完毕。\nb. 集成 SDK 开发海康设备的SDK是通过网络的方式访问设备，需要用到设备激活过程中设置的参数：IP、端口、用户名、密码、主动注册登录设备\n海康威视的设备能力，按照设备类型对外开放，现阶段（2020-9）按照设备类型对外开放的接口，包括：AI 摄像机、通用摄像机、出入口产品、门禁产品\nc.SDK 接口的主要调用流程\n其中虚线框的流程是可选部分，不会影响其他流程和模块的功能使用。按实现功能的不同可以分成十个模块，实现每个模块的功能时初始化SDK、用户注册设备、注销设备和释放SDK资源这4个流程是必不可少的。\n\n初始化 SDK：对整个网络SDK系统的初始化、内存分配等操作。\n设置连接超时时间：可选，用于设置SDK中的网络连接超时时间，用户可以根据自己的需要设置该值，在不调用此接口设置超时时间的情况下，将采用SDK中的默认值。\n设置接收异常消息的回调函数：由于SDK中大部分模块的功能都是由异步模式实现，所以可以使用此接口接收预览、报警、回放、透明通道和语音对讲等模块发生的异常信息。用户可以在初始化SDK后就设置该回调函数，在应用层对各个模块异常消息的接收和处理。从解析服务器获得设备的IP地址：该接口提供一种在仅知道设备名称（或者设备域名）和序列号的情况下，从解析服务器（IP Server 或者 DDNS Dynamic Domain Name Server，动态域名服务）获得设备IP地址的方法。\n用户注册设备：实现用户的注册功能，注册成功后返回的用户ID作为其他功能操作的唯一标识，SDK允许最大注册个数为2048个。就设备而言，V3.0以上版本支持的设备允许有32个注册用户名，而且同时最多允许128个用户注册；V3.0一下版本支持的设备允许有16个注册用户名；而且同时最多允许128个用户注册。预览模块：从设备取实时码流，解码显示以及播放控制、抓图等功能。回放和下载模块：可以通过按时间和文件名的方式远程回放或者下载设备的录像文件，后续可以进行解码或存储。同时还支持断点续传功能。\n参数配置模块：设置和获取设备参数，主要包括设备参数、网络参数、通道压缩参数、串口参数、报警参数、异常参数、交易信息和用户配置等参数。远程设备维护模块：实现关闭设备、重启设备、恢复默认值、远程硬盘格式化、远程升级和配置文件导入/导出等维护工作。\n语音对讲转发模块：实现和设备的语音数据对讲和语音数据获取，音频编码格式指定。\n报警模块：处理设备上传的各种报警信号。报警分为”布防“和”监听“两种方式，在采用监听方式并且不需要获取用户ID的情况下，报警模块可以无需进行”用户注册“操作步骤。\n透明通道模块：透明通道是将IP数据报文解析后直接发送到串行口的一种技术。实际上起到了沿伸串行设备控制距离的作用。可利用IP网络控制多种串行设备，如控制解码器、矩阵、报警主机、门禁、仪器仪表等串行设备，对用户来说，只看到了点对点的传输，无须关心网络传输的过程，所以称为串口透明通道。SDK提供485和232串口作为透明通道功能，其中要将232作为透明通道使用，首先必须在232串口的配置信息中将工作模式选为透明通道，这样232串口才可作为透明通道使用。\n云台控制模块：实现对云台的基本操作、预置点、巡航、轨迹和透明云台的控制。SDK将云台控制分为两种模式：一种是通过图像预览返回的句柄进行控制；另一种是无预览限制，通过用户注册ID号进行云台控制。\n解码器功能模块：实现解码器设备的配置、解码控制等功能。SDK支持单路解码器和多路解码器，但目前以多路解码器为主流产品。\n智能行为分析模块：实现对智能产品的参数配置，报警上传和能力集获取等功能\n\n3.安卓如何调用摄像头拍照创建布局文件// 创建布局文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    tools:context=&quot;.MainActivity&quot;&gt;        &lt;!--用于显示预览--&gt;    &lt;SurfaceView        android:id=&quot;@+id/surfaceview&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;    &lt;!--LinearLayout线性布局管理器 放在父容器底部--&gt;    &lt;!--LinearLayout线性布局管理器 内部水平分布--&gt;    &lt;LinearLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:layout_alignParentBottom=&quot;true&quot;        android:orientation=&quot;horizontal&quot;        android:gravity=&quot;center_horizontal&quot;&gt;        &lt;Button            android:id=&quot;@+id/take_photo&quot;            android:layout_width=&quot;wrap_content&quot;            android:layout_height=&quot;wrap_content&quot;            android:text=&quot;拍照&quot; /&gt;        &lt;Button            android:id=&quot;@+id/preview&quot;            android:layout_width=&quot;wrap_content&quot;            android:layout_height=&quot;wrap_content&quot;            android:text=&quot;打开摄像头&quot; /&gt;            &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt;\n\n主函数方法1.这里调用了Camera 的类2.声明一个布尔型变量ispreview，用来判断摄像头是否打开\n//写在开始部分  private Camera camera;  private boolean ispreview = false;\n\n3.设置全屏显示\n //写在onCreat方法里面getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,               WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n4.获取SurfaceView,SurfaceHolder\n//写在onCreat方法里面   final SurfaceView surface = findViewById(R.id.surfaceview);//获取surfaceview      final SurfaceHolder surfaceHolder = surface.getHolder();//获取suafaceholder      surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n5.获取监听预览按钮\n //写在onCreat方法里面Button preview = findViewById(R.id.preview);       preview.setOnClickListener(new View.OnClickListener() &#123;           @Override           public void onClick(View v) &#123;               if (!ispreview) &#123;//如果没打开                   camera = Camera.open();//打开摄像头                   ispreview = true;               &#125;               try &#123;                   camera.setPreviewDisplay(surfaceHolder);//设置预览                   Camera.Parameters parameters = camera.getParameters();//获取摄像头参数                   parameters.setPictureFormat(PixelFormat.JPEG);//设置图片为jpg                   parameters.set(&quot;jpeg-quality&quot;, 80);//设置图片质量                   camera.setParameters(parameters);//重新设置摄像头参数                   camera.startPreview();//开始预览                   camera.setDisplayOrientation(90);//不加的话，预览的图像就是横的                   camera.autoFocus(null);//自动对焦               &#125; catch (IOException e) &#123;                   e.printStackTrace();               &#125;           &#125;       &#125;);\n\n6.拍照\n//写在onCreat方法里面Button take_photo = (Button)findViewById(R.id.take_photo);//获取按钮take_photo.setOnClickListener(new View.OnClickListener() &#123;//监听          @Override          public void onClick(View v) &#123;              if (camera != null) &#123;                  camera.takePicture(null, null, jpeg);              &#125;          &#125;      &#125;);\n\n7.存储图像\n//写在onCreat方法外面final Camera.PictureCallback jpeg = new Camera.PictureCallback() &#123;      @Override      public void onPictureTaken(byte[] data, Camera camera) &#123;          Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);          //根据拍照得到的数据集创建位图          camera.stopPreview();          ispreview = false;          File appDir = new File(Environment.getExternalStorageDirectory(), &quot;/DCIM/Camera/&quot;);          if (!appDir.exists()) &#123;//如果目录不存在              appDir.mkdir();//创建目录          &#125;          String filename = System.currentTimeMillis() + &quot;.jpg&quot;;          File file = new File(appDir, filename);          try &#123;              FileOutputStream outputStream = new FileOutputStream(file);              //创建文件输出流              bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);              //将图片压缩成JPEG格式输出到输出流              outputStream.flush();//将缓冲区的数据都输入到输出流              outputStream.close();//关闭输出流          &#125; catch (FileNotFoundException e) &#123;              e.printStackTrace();          &#125; catch (IOException e) &#123;              e.printStackTrace();          &#125;          //将图片插入到系统图库          try &#123;              MediaStore.Images.Media.insertImage(MainActivity.this.getContentResolver(), file.getAbsolutePath(), filename, null);          &#125; catch (FileNotFoundException e) &#123;              e.printStackTrace();          &#125;          //通知图库更新          MainActivity.this.sendBroadcast(new Intent(Intent.                  ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse(&quot;file://&quot;+&quot;&quot;)));          Toast.makeText(MainActivity.this,&quot;照片已存&quot;+file,Toast.LENGTH_LONG).show();          resetCamera();//图片保存后，判断，是否需要重新打开预览，重新创建一个方法，第8步      &#125;  &#125;;\n\n8.重新判定摄像头是否在预览\nprivate void resetCamera() &#123;\tif (!ispreview) &#123;    camera.startPreview();    ispreview=true;   \t&#125;&#125;\n\n9.释放摄像头资源\nprotected  void onPause() &#123;    super.onPause();    if(camera!=null)&#123;        camera.stopPreview();        camera.release();    &#125;&#125;\n\n10.从这边开始，我们就完成了整体布局，下面去manifest文件中进行权限处理路径为：app/manifes/AndroidManifest.xml ， 这是安卓布局文件\n\n增加了 摄像头权限，读写权限，自动对焦 的申请\n\n&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;    tools:ignore=&quot;ProtectedPermissions&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera.autofoucs&quot;/&gt;\n\n","categories":["日常调研"],"tags":["摄像头 华为云"]},{"title":"A_数据结构与算法学习笔记","url":"/2021/05/24/A-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"#目录(更新中)\n[TOC]\n\n\n数据结构与算法\n\n算法是程序的灵魂，优秀的程序可以在海量数据计算时，依然保持高速计算 \n\n一般来讲 程序会使用了内存计算框架(比如 Spark)和缓存技术(比如 Redis 等)来优化程序,再深入的思考一下，这 些计算框架和缓存技术， 它的核心功能是哪个部分呢？ \n\n拿实际工作经历来说, 在 Unix 下开发服务器程序，功能是要支持上千万人同时在线，在上线前做内测，一切OK,可上线后，服务器就支撑不住了, 公司的 CTO 对代码进行优化，再次上线，坚如磐石。你就能感受到程序 是有灵魂的，就是算法。 \n\n目前程序员面试的门槛越来越高，很多一线 IT 公司(大厂)，都会有数据结构和算法面试题(负责的告诉你，肯定有的) \n\n如果你不想永远都是代码工人,那就花时间来研究下数据结构和算法\n\n\n\n一、数据结构与算法概述以及经典题目举例1、数据结构和算法的关系\n\n数据 data 结构(structure)是一门研究组织数据方式的学科，有了编程语言也就有了数据结构.学好数据结构可以 编写出更加漂亮,更加有效率的代码。 \n\n要学习好数据结构就要多多考虑如何将生活中遇到的问题,用程序去实现解决. \n\n程序 = 数据结构 + 算法\n\n数据结构是算法的基础, 换言之，想要学好算法，需要把数据结构学到位。\n\n\n\n2、线性结构与非线性结构\n数据结构包括：线性结构和非线性结构。\n\nⅠ-线性结构\n\n线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系 \n\n线性结构有两种不同的存储结构，即顺序存储结构(数组)和链式存储结构(链表)。顺序存储的线性表称为顺序 表，顺序表中的存储元素是连续的 \n\n链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地 址信息 \n\n线性结构常见的有：数组、队列、链表和栈\n\n\n\nⅡ-非线性结构\n非线性结构包括：二维数组，多维数组，广义表，树结构，图结构\n\n3、经典面试题Ⅰ-字符串匹配问题：\n\n有一个字符串 str1= “”硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好””，和一个子串 str2=”尚硅谷你尚 硅你”\n\n现在要判断 str1 是否含有 str2, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1 \n\n要求用最快的速度来完成匹配 4) \n\n\n解: 1. 暴力匹配 [简单，但是效率低] 2.  KMP 算法《部分匹配表》\n\nⅡ-汉诺塔游戏\n请完成汉诺塔游戏的代码: 要求：\n\n将 A 塔的所有圆盘移动到 C 塔。并且规定，在 \n\n小圆盘上不能放大圆盘， \n\n\n3)在三根柱子之间一次只能移动一个圆盘\n\n\nⅢ-八皇后问题:\n八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、 同一列或同一斜线上，问有多少种摆法。【92】=&gt; 分治算法\n\n\nⅣ-马踏棋盘算法\n\n马踏棋盘算法也被称为骑士周游问题 \n\n将马随机放在国际象棋的 8×8 棋盘 Board[0～7][0～7]的某个方格中，马按走棋规则(马走日字)进行移动。要求 每个方格只进入一次，走遍棋盘上全部 64 个方格 \n\n游戏演示:\n\n会使用到图的深度优化遍历算法(DFS) + 贪心算法优化\n\n\n\n\n4、几个实际编程中遇到的问题Ⅰ-字符串替换问题\n\n\nⅡ-一个五子棋程序\n如何判断游戏的输赢，并可以完成存盘退出和继续上局的功能 \n\n棋盘 二维数组=&gt;(稀疏数组)-&gt; 写入文件 【存档功能】 \n\n读取文件-》稀疏数组-》二维数组 -》 棋盘 【接上局】\n\n\n\n\nⅢ-约瑟夫(Josephu)问题(丢手帕问题)\n\nJosephu 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数 到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止， 由此产生一个出队编号的序列。 \n\n提示：用一个不带头结点的循环链表来处理 Josephu 问题：先构成一个有 n 个结点的单循环链表（单向环形链 表），然后由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点 又从 1 开始计数，直到最后一个结点从链表中删除算法结束。 \n\n小结：该问题解决自 -&gt;第四章链表的6小节 --环形链表实现 \n\n\n\nⅣ-其它常见算法问题:\n\n修路问题 =&gt; 最小生成树(加权值)【数据结构】+ 普利姆算法 \n\n最短路径问题 =&gt; 图+弗洛伊德算法 \n\n汉诺塔 =&gt; 分支算法 \n\n八皇后问题 =&gt; 回溯\n\n\n\n\n二、稀疏数组与队列1、稀疏 sparsearray 数组Ⅰ-需求分析\n需求举例:编写的五子棋程序中，有存盘退出和续上盘的功能\n\n分析:因为该二维数组的很多值是默认值 0, 因此记录了很多没有意义的数据.-&gt;稀疏数组。\n\nⅡ-基本介绍\n当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。 稀疏数组的处理方法是: \n\n记录数组一共有几行几列，有多少个不同的值 \n\n把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模\n\n\n\n\nⅢ-应用实例\n\n使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等) \n\n把稀疏数组存盘，并且可以从新恢复原来的二维数组数 \n\n整体思路分析\n\n\n\n\n代码实现\n\n&gt;package com;&gt;public class SparseArray &#123;   public static void main(String[] args) &#123;       //创建一个原始的二维数组11*11       /* 0:表示没有棋子,1表示黑子,2表示蓝子 */       int chessArr1[][] = new int[11][11];       chessArr1[1][2] = 1;       chessArr1[2][3] = 2;       chessArr1[5][5] = 2;       //输出原始的二维数组       System.out.println(&quot;原始的二维数组&quot;);       for (int[] row : chessArr1) &#123;           for (int data : row) &#123;               System.out.printf(&quot;%d\\t&quot;, data);           &#125;           System.out.println();       &#125;       //将二维数组转稀疏数组       //1.先遍历二维数组,得到非0数据的个数       int sum = 0;       for (int i = 0; i &lt; 11; i++) &#123;           for (int j = 0; j &lt; 11; j++) &#123;               if (chessArr1[i][j] != 0) sum++;           &#125;       &#125;       //创建对应的稀疏数组       int sparseArr[][] = new int[sum + 1][3];       //给稀疏数组赋值  --&gt;存行列长度,有效数据       sparseArr[0][0] = 11;       sparseArr[0][1] = 11;       sparseArr[0][2] = sum;       //遍历二维数组,       int count = 0;//给稀疏数组当计数器       for (int i = 0; i &lt; 11; i++) &#123;           for (int j = 0; j &lt; 11; j++) &#123;               //当数组中遇到不为0时,给稀疏数组插入(push同效果):行 列 有效数               if (chessArr1[i][j] != 0) &#123;                   count++;                   sparseArr[count][0] = i;                   sparseArr[count][1] = j;                   sparseArr[count][2] = chessArr1[i][j];               &#125;           &#125;       &#125;       System.out.println(&quot;有效数据&quot; + sum);       //输出稀疏数组的形式       System.out.println(&quot;&#x27;得到稀疏数组为~~&#x27;&quot;);       for (int i = 0; i &lt; sparseArr.length; i++) &#123;           System.out.printf(&quot;%d\\t%d\\t%d\\t\\n&quot;, sparseArr[i][0], sparseArr[i][1], sparseArr[i][2]);       &#125;       System.out.println(&quot;将稀疏数组回复成原始的二维数组&quot;);       //1. 先读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组       int chessArr2[][] = new int[sparseArr[0][0]][sparseArr[0][1]];       //2. 在读稀疏数组后几行的数据(从第二行开始,所以i=1),并赋值给原始的二维数组即可       for (int i = 1; i &lt; sparseArr.length; i++) &#123;           chessArr2[sparseArr[i][0]][sparseArr[i][1]] = sparseArr[i][2];       &#125;       //输出恢复后的二维数组       System.out.println(&quot;输出恢复后的二维数组&quot;);       for (int[] row : chessArr2) &#123;           for (int data : row) &#123;               System.out.printf(&quot;%d\\t&quot;, data);           &#125;           System.out.println();       &#125;   &#125;&gt;&#125;\n\n\n练习 要求： 1) 在前面的基础上，将稀疏数组保存到磁盘上，比如 map.data 2) 恢复原来的数组时，读取 map.data 进行恢复\n\n\n2、队列Ⅰ-队列介绍\n\n队列是一个有序列表，可以用数组或是链表来实现。 \n\n遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出\n\n\n\n\nⅡ-数组模拟队列\n\n队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如上图, 其中 maxSize 是该队列的最大容量。 \n\n因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 front 及 rear 分别记录队列前后端的下标， front 会随着数据输出而改变，而 rear 则是随着数据输入而改变，如队列介绍中图所示\n\n当我们将数据存入队列时称为”addQueue”，addQueue 的处理需要有两个步骤：思路分析:\n\n\n\n将尾指针往后移：rear+1 , 当 front == rear 【空】 \n\n若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear 所指的数组元素中，否则无法存入数据\n\n\n\n注意:front并没有直接指向数据,而是数据前一位,所以当你要用front读取队列头时需要front+1\n\n代码实现\n\n\n  package com.queue;import java.util.Scanner;public class ArrayQueueDemo &#123;    public static void main(String[] args) &#123;        //创建一个队列        ArrayQueue queue = new ArrayQueue(3);        char key = &#x27; &#x27;;//接受用户输入        Scanner scanner = new Scanner(System.in);        boolean loop = true;        //输出一个菜单        while (loop) &#123;            System.out.println(&quot;s(show):显示队列&quot;);            System.out.println(&quot;e(exit):退出程序&quot;);            System.out.println(&quot;a(add):添加数据到队列&quot;);            System.out.println(&quot;g(get):从队列取出数据&quot;);            System.out.println(&quot;h(head):查看队列头的数据&quot;);            key = scanner.next().charAt(0);//接受一个字符            switch (key) &#123;                case &#x27;s&#x27;:                    queue.showQueue();                    break;                case &#x27;a&#x27;:                    System.out.println(&quot;输入一个数字&quot;);                    int value = scanner.nextInt(); //不用再new一个新得scanner                    queue.addQueue(value);                    break;                case &#x27;g&#x27;:                    try &#123;                        int res = queue.getQueue();                        System.out.printf(&quot;取出的数据是%d\\n&quot;, res);                    &#125; catch (Exception e) &#123;                        System.out.println(e.getMessage());                    &#125;                    break;                case &#x27;h&#x27;:                    try &#123;                        int head = queue.headQueue();                        System.out.printf(&quot;表头是%d\\n&quot;, head);                    &#125; catch (Exception e) &#123;                        System.out.println(e.getMessage());                    &#125;                    break;                default:                    scanner.close();//关闭不释放会有异常                    loop = false;                    break;            &#125;        &#125;        System.out.println(&quot;程序退出&quot;);    &#125;&#125;//使用数组模拟队列-编写一个ArrayQueue类class ArrayQueue &#123;    private int maxSize;//表示数组的最大容量    private int front; //队列头    private int rear;//队列尾    private int[] arr; //该数据用于存放数据,模拟队列    //创建队列的构造器    public ArrayQueue(int arrMaxSize) &#123;        maxSize = arrMaxSize;        arr = new int[maxSize];        front = -1;//指向队列头部,分析出front是只想队列头的前一个位置        rear = -1;//指向队列尾部,只想队列尾部数据(即队列最后一个数据)    &#125;    //1. 判断队列是否满    public boolean isFull() &#123;        return rear == maxSize - 1; //当队列为指向数组最后一位时就是队列满    &#125;    //2. 判断队列是否为空    public boolean isEmpty() &#123;        return rear == front; //当队列头与尾部相等时,说明该队列没有值了    &#125;    //3. 添加数据到队列    public void addQueue(int n) &#123;        //判断队列是否满        if (isFull()) &#123;            System.out.println(&quot;队列满,不能加入数据~~~~~~&quot;);            return;        &#125;        rear++; //让rear 往后移动一位        arr[rear] = n; //以后移后的rear作为数组下标进行赋值    &#125;    //4. 获取队列的数据,出队列    public int getQueue() &#123;        //判断队列是否为空//抛出异常        if (isEmpty()) throw new RuntimeException(&quot;队列为空,不能取数据&quot;);        front++; //front后移 出队列        return arr[front];    &#125;    //5. 显示队列的所有数据    public void showQueue() &#123;        //遍历        if (isEmpty()) &#123;            System.out.println(&quot;队列空的 没有数据&quot;);            return;        &#125;        for (int i = 0; i &lt; arr.length; i++) &#123;            System.out.printf(&quot;arr[%d]=%d\\n&quot;, i, arr[i]);        &#125;    &#125;    //显示队列的头数据,注意不是取出数据    public int headQueue() &#123;        //判断        if (isEmpty())  throw new RuntimeException(&quot;队列空的,没有数据~~~~&quot;);        return arr[front + 1]; //front并没有直接指向数据,而是数据前一位,所以需要+1    &#125;&#125;\n\n\n问题分析与优化方向:\n\n\n目前数组使用一次就不能用， 没有达到复用的效果.\n\n  ​    原因:取出数据时是将列表头(front++)向后移动,导致队列前面的空间并没有被释放,如上图第三个队列示例图 \n\n将这个数组使用算法，改进成一个环形的队列 取模：%\n\n\nⅢ-数组模拟环形队列思路分析\n\n对前面的数组模拟队列的优化，充分利用数组. 因此将数组看做是一个环形的。(通过取模的方式来实现即可)\n\n分析说明:\n\n尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定,这个在做判断队列满的 时候需要注意 (rear + 1) % maxSize == front 满]\n\nrear == front [空]\n\n\n\n思路分析示例图3-2-3-1\n\n\n环形队列示例图\n\n\n  \n\nⅣ-个人对于环形队列的理解与总结\n个人对于思路分析示例图3-2-3-1理解与总结:\n\nrear初始化为0:因为当队列为空时,rear队列尾应是指向-1位置,因为整个队列是空的\n\n  所以符合调整:rear指向队列的最后一个元素的后一个位置,可以留出一个空间作为约定(用来判断是队空还是队满)\n\nfront初始化为0:因为要指向队列第一个位置,所以为0\n\n队列满条件:(rear+1)%maxSize==front–&gt;原理如环形队列示例图\n\n\n  当(rear+1)%maxSize==front时,队列情况如环形队列示例图右边部分 –&gt;例: (4+1)%10==5\n\n队列为空rear==front:假使你队列曾经加到8个数据,所以你rear==8,但当你将队列一个一个取出时front发生如下变化:front==0--&gt;front++*n--&gt;front==8,所以当front==rear==8时,就可以判断队列为空\n\n队列的有效数据个数:(rear+maxSize-font)%maxSize –&gt;\n\n\n  1)提出疑惑:为什么要先加maxSize–&gt;可能出现队尾rear小于队首front的情况\n   通过这个环形队列图(里面数字是数组下标不是数据)你应该可以很容易理解:假使队列长8、队尾在2的位置、队首在6的位置\n​    解决:如图所示\n  \n  2)再次提出疑惑:老铁!!!我看图上6~2,甚至还用手指去数,明明就是五个数据啊!为什么还能算成4?\n​    解:注意rear的定义:rear指向队列的最后一个元素的后一个位置,所以这时候最后一个队列数据是在1的位置,所以6~1是4位\n\nⅤ-环形队列代码实现\n&gt;package com.queue;&gt;import java.util.Scanner;&gt;public class CircleArrayQueueDemo &#123;   public static void main(String[] args) &#123;       //创建一个环形队列       System.out.println(&quot;创建一个环形队列&quot;);       CircleArrayQueue queue = new CircleArrayQueue(3);       char key = &#x27; &#x27;;//接受用户输入       Scanner scanner = new Scanner(System.in);       boolean loop = true;       //输出一个菜单       while (loop) &#123;        .....//同上面队列代码调用,省略       &#125;   &#125;&gt;&#125;&gt;class CircleArrayQueue &#123;   private int maxSize;//表示数组的最大容量   private int front; //队列头   private int rear; //队列尾部   private int[] arr;//该数据用于存放数据,模拟队列   //创建队列的构造器   public CircleArrayQueue(int arrMaxSize) &#123;       //注意:如果要能存3个有效数据,arrMaxSize就要为`4`,因为预留了一个位置,所以需要传入的数字要+1       maxSize = arrMaxSize + 1;       arr = new int[maxSize];       /**        * 1. 此处front含义做出调整:front指向队列的第一个元素,也就是说arr[front]就是队列的第一个元素,front的初始值为0*        * 2.此处rear含义做出调整:rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定(判断栈满栈空),rear的初始值为0        */       front = rear = 0;   &#125;   //1. 判断队列是否满   public boolean isFull() &#123;       //此时队满条件发生变化,因为rear预留了一个位置       return (rear + 1) % maxSize == front;   &#125;   //2. 判断队列是否为空   public boolean isEmpty() &#123;       return front == rear;   &#125;   /**    * 3.获取队列的有效数量    * @return int  此函数结果用来在 遍历队列数组时防止下标越界    */   public int getSize() &#123;       return (rear + maxSize - front) % maxSize;   &#125;   //4. 添加数据到队列   public void addQueue(int n) &#123;       //判断是否队满       if (isFull()) &#123;           System.out.println(&quot;队列满,不能加入数据~~~~~&quot;);           return;       &#125;       arr[rear] = n;//这里需要先赋值再将rear+1,因为rear指向最后一个有效数据       //让rear后移一位,但是需要注意`%`,因为栈尾可以回到下标为`0`处,原因看我画的图       rear = (rear + 1) % maxSize;   &#125;   //5. 获取队列数据 出队列(类似删除数组第一位)   public int getQueue() &#123;       //判断队列是否为空,抛出异常       if (isEmpty()) &#123;           throw new RuntimeException(&quot;队列为空,不能取数据&quot;);       &#125;       //这里需要先将`front`的值保存下来(或者直接保存arr[front],再去return),因为front此时对应的是第一个有效数据,如果＋1后再返回,将指向错误的有效数据       int thisFront = front;       //front后移,原因与注意点同rear       front = (front + 1) % maxSize;       return arr[thisFront];   &#125;   //6. 显示所有队列的数据   public void showQueue() &#123;       //先判断是否为空       if (isEmpty()) &#123;           System.out.println(&quot;队列为空,没有数据&quot;);           return;       &#125;       /**        * 1.首先front指向队列第一位,所以要从front开始遍历        * 2.结束        *        */       for (int i = front; i &lt; front + getSize(); i++) &#123;           System.out.printf(&quot;arr[%d]=%d\\n&quot;, i % maxSize, arr[i % maxSize]);       &#125;   &#125;   //7. 显示队列的头数据,注意不是取出数据   public int headQueue() &#123;       //判断是否为空       if (isEmpty()) &#123;           throw new RuntimeException(&quot;队列空的,没有数据~~~~&quot;);       &#125;       //front是直接指向队列第一位的,所以这里可以直接返回       return arr[front];   &#125;&gt;&#125;\n\n\n三、链表1、链表(Linked List)介绍\n\n链表是以节点的方式来存储,是链式存储 \n\n每一个结点包含 data 域、next 域。其中 next 域存放的是下一个结点的地址(双向链表还有一个prev)\n\n如图：发现链表的各个节点不一定是连续存储. \n\n\n​    \n\n链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定\n\n单链表(带头结点) 逻辑结构示意图如下\n\n\n​    \n\n代码描述节点:\n\n\n```javapublic ListNode{public int age;                // 本结点的信息    \npublic String name;\npublic ListNode next;         // 下一个结点的地址\n\n}### 2、单链表的应用实例&gt;使用带 head 头的单向链表实现 –水浒英雄排行榜管理完成对英雄人物的增删改查操作#### Ⅰ-添加方法一:在添加英雄时，直接添加到链表的尾部1. 思路分析示意图:   ![image-20210416104715422](A_数据结构与算法学习笔记/image-20210416104715422.png)2. 演示最基础的链表插入:`插入到链表的最后面`,不考虑顺序   1. 首先我们需要创建一个头结点，该结点的作用就是表示单链表的头，如果没有头结点，我们是无法知道链表的首个结点是谁、在哪；   2. 单链表是单向的，所以我们需要从头结点开始遍历整个链表直到末尾，然后增加结点到链表的末尾；   3. 需要注意的是，头结点是万万不能乱动的，所以我们最好将头结点复制到一个临时结点变量中，对临时变量进行遍历。      3. 代码示例:   ```java   package com.linkedlist.firstadd;   /**    * 演示最基础的链表插入,插入到链表的最后面,不考虑顺序    */   public class FirstAdd &#123;       public static void main(String[] args) &#123;           //先创建节点对象,一个节点就是一个节点英雄           HeroNode hero1 = new HeroNode(1, &quot;宋江&quot;, &quot;及时雨&quot;);           HeroNode hero2 = new HeroNode(2, &quot;卢俊义&quot;, &quot;玉麒麟&quot;);           HeroNode hero3 = new HeroNode(3, &quot;吴用&quot;, &quot;智多星&quot;);           HeroNode hero4 = new HeroNode(4, &quot;林冲&quot;, &quot;豹子头&quot;);           //创建链表对象           SingleLinkedList singleLinkedList = new SingleLinkedList();           //不按顺序添加           singleLinkedList.add(hero1);           singleLinkedList.add(hero4);           singleLinkedList.add(hero2);           singleLinkedList.add(hero3);           //调用打印           singleLinkedList.list();       &#125;   &#125;      //一、定义一个HeroNode,每个HeroNode对象就是一个节点   class HeroNode &#123;       public int no;       public String name;       public String nickname;       public HeroNode next;//指向下一个节点       //构造器       public HeroNode(int no, String name, String nickname) &#123;           this.no = no;           this.name = name;           this.nickname = nickname;       &#125;       //为了显示方法,我们重新toString;里不打印next,是因为如果这样打印的话,会将整个链表全部打印出来       @Override       public String toString() &#123;           return &quot;HeroNode[no=&quot; + no + &quot;,name=&quot; + name + &quot;,nickname=&quot; + nickname + &quot;]&quot;;       &#125;      &#125;   //二、定义SingleLinkedList管理我们的英雄   class SingleLinkedList &#123;       //1. 先初始化一个头节点,头节点不要动,不存放具体的数据       private HeroNode head = new HeroNode(0, &quot;&quot;, &quot;&quot;);       //2. 返回头节点,get方法       public HeroNode getHead() &#123;           return head;       &#125;          /**        * 3. 添加节点到单链表后        * 思路:不考虑编号顺序,直接插入到链表最后        * 1)找到当前链表的最后节点        * 2)将最后这个节点的next指向新的节点        */       public void add(HeroNode heroNode) &#123;           //因为head节点是不能动的,动了的话链表就找不到入口或者找错路口,所以我们需要一个辅助遍历           HeroNode temp = head;           //遍历链表,找到最后           while (true) &#123;               //找到链表的最后:当next值为空,就是最后一位               if (temp.next == null) break;               //如果没有找到最后,就将temp向后移动,不然就原地踏步死循环了               temp = temp.next;           &#125;           //当退出while循环的时候,temp就指向了链表的最后           //将最后这个节点的next指向新的节点           temp.next = heroNode;       &#125;          //4. 显示链表[遍历]       public void list() &#123;           //判断链表是否为空           if (head.next == null) &#123;               System.out.println(&quot;链表为空&quot;);               return;           &#125;           //因为头节点不能动且头节点是没有数据的,所以直接`head.next;`           HeroNode temp = head.next;           while (true) &#123;               if (temp == null) break;               //输出节点信息               System.out.println(temp);               //将temp后移,一定小心               temp = temp.next;           &#125;       &#125;   &#125;   \n\n\nⅡ-添加方法二:根据排名将英雄插入到指定位置\n\n如果有这个排名(即no重复)，则添加失败，并给出提示\n\n思路分析示意图:\n\n\n \n\n代码中实例场景示例图:\n\n\n\n思路分析:\n\n首先还是要创建一个头结点，然后拷贝一个头结点作为辅助变量，使用辅助变量来遍历整个链表；\n\n如果出现某个结点（假设是 A 结点）的下一个结点（假设是 B 结点）的编号大于待插入结点的情况，那么就首先将 B 结点记录在待插入的结点中，然后再将这个待插入结点插入到 A 结点之后；\n\n如果遍历到了链表末尾还没找到编号更大的，就直接插入到末尾即可。\n\n代码实现:(只是将第一方法代码示例中的add()替换未addByOrder)\n\n\n     public void addByOrder(HeroNode heroNode) &#123;    /*因为head节点是不能动的,动了的话链表就找不到入口或者找错路口,所以我们需要一个辅助遍历       因为单链表,所以我们找的temp 必须为于添加位置的前一个节点,否则插入不了*/        HeroNode temp = head;        boolean flag = false; //flag标识添加的编号是否存在,默认为false        while (true) &#123;            if (temp.next == null) break;//说明temp已经在链表的最后,就在链表插入(此时temp已经在链表尾部了)            if (temp.next.no &gt; heroNode.no) break;//说明位置已经找到,就在temp的后面插入            else if (temp.next.no == heroNode.no) &#123;//说明希望添加的heroNode编号已经存在                flag = true;                break;            &#125;            temp = temp.next;//temp后移,直到找到符合上面条件为止        &#125;        if (flag) System.out.printf(&quot;准备插入的英雄的编号%d已经存在了,不能加入\\n&quot;, heroNode.no);        else &#123;            //将heroNode插入到链表的temp后面            heroNode.next = temp.next;            temp.next = heroNode;        &#125;    &#125;-------------- main()中调用  ------------------------ singleLinkedList.addByOrder(hero2); singleLinkedList.addByOrder(hero4); singleLinkedList.addByOrder(hero4);\n\n\nⅢ-修改节点\n\n思路(1) 先找到该节点，通过遍历，(2) temp.name = newHeroNode.name ; temp.nickname= newHeroNode.nickname\n首先还是要创建一个头结点，然后拷贝一个头结点作为辅助变量，使用辅助变量来遍历整个链表；\n遍历过程中，比对每个结点的编号与要更新的结点的编号是否一致，如果一致则说明找到了要更新的结点。接着将找到的结点中的数据替换成要更新的数据即可；\n如果遍历结束还没找到对应编号的结点，说明链表中不存在这个结点；\n代码实现\n\n   //5. 修改节点信息,根据no编号来修改,即no编号不能改    public void update(HeroNode newHeroNode) &#123;        if (head.next == null) &#123;            System.out.println(&quot;链表为空&quot;);            return;        &#125;        ;        //定义一个辅助变量        HeroNode temp = head;        boolean flag = false;        //找到需要修改的节点,根据no编号        while (true) &#123;            if (temp == null) break; //表示当前到链表尾端            if (temp.no == newHeroNode.no) &#123;//表示找到该节点了                flag = true;                break;            &#125;            temp = temp.next;        &#125;        if (flag) &#123;//根据flag可以判断是否找到要修改的节点            temp.name = newHeroNode.name;            temp.nickname = newHeroNode.nickname;        &#125; else System.out.printf(&quot;没有找到编号%d的阶段,不能进行修改\\n&quot;, newHeroNode.no);    &#125;----------------- main()调用测试 ----------------------------------------  //测试修改节点的代码        HeroNode newHeroNode = new HeroNode(2, &quot;小卢&quot;, &quot;玉麒麟~~&quot;);        singleLinkedList.update(newHeroNode);        System.out.println(&quot;测试修改后的&quot;);        singleLinkedList.list();    \n\nⅣ-删除节点\n\n思路分析图\n\n \n\n其实就是方法二中实例场景示例图的逆推\n首先还是要创建一个头结点，然后拷贝一个头结点作为辅助变量，使用辅助变量来遍历整个链表；\n如果 遍历到某个结点的编号与要查找的给定的编号相同，那么就找到了结点；\n如果遍历结束还没找到，说明该编号不在链表的结点中。\n代码示例\n\n    //6. 删除节点1.head不能动,所以需要一个temp辅助节点找到待删除节点前的一个节点    //         2.我们比较时,时temp.next.no和待删除节点的no比较    public void del(int no) &#123;        if (head.next == null) &#123;            System.out.println(&quot;链表为空&quot;);            return;        &#125;        HeroNode temp = head;        boolean flag = false;        while (true) &#123;            if (temp.next == null) break;//说明到了链表的最后            if (temp.next.no == no) &#123;                //表示找到了待删除节点的前一个节点temp                flag = true;                break;            &#125;            temp=temp.next;//temp后移,遍历        &#125;        if (flag) temp.next=temp.next.next; //如果找到,进行删除        else System.out.printf(&quot;要删除的%d节点不存在\\n&quot;,no);    &#125;----------------- main()调用 ------------------------------   //删除一个节点    singleLinkedList.del(1);    singleLinkedList.del(4);    System.out.println(&quot;删除后的链表情况~~&quot;);    singleLinkedList.list();\n\nⅤ-全部代码\n&gt;package com.linkedlist.secondadd;&gt;public class SecondAdd &#123;   public static void main(String[] args) &#123;       //先创建节点对象,一个节点就是一个节点英雄       HeroNode hero1 = new HeroNode(1, &quot;宋江&quot;, &quot;及时雨&quot;);       HeroNode hero2 = new HeroNode(2, &quot;卢俊义&quot;, &quot;玉麒麟&quot;);       HeroNode hero3 = new HeroNode(3, &quot;吴用&quot;, &quot;智多星&quot;);       HeroNode hero4 = new HeroNode(4, &quot;林冲&quot;, &quot;豹子头&quot;);       //创建链表对象       SingleLinkedList singleLinkedList = new SingleLinkedList();       //1. 不按顺序添加:方法一&gt;//        singleLinkedList.add(hero1);&gt;//        singleLinkedList.add(hero4);&gt;//        singleLinkedList.add(hero2);&gt;//        singleLinkedList.add(hero3);       //2. 添加方法二       singleLinkedList.addByOrder(hero1);       singleLinkedList.addByOrder(hero3);       singleLinkedList.addByOrder(hero2);       singleLinkedList.addByOrder(hero4);       singleLinkedList.addByOrder(hero4);       //调用打印       singleLinkedList.list();       //3. 测试修改节点的代码       HeroNode newHeroNode = new HeroNode(2, &quot;小卢&quot;, &quot;玉麒麟~~&quot;);       singleLinkedList.update(newHeroNode);       System.out.println(&quot;测试修改后的&quot;);       singleLinkedList.list();       //4. 删除一个节点       singleLinkedList.del(1);       singleLinkedList.del(4);       System.out.println(&quot;删除后的链表情况~~&quot;);       singleLinkedList.list();   &#125;      /**-------下面 `面试题部分`方法可以放在这个地方进行运行 编写的是静态方法----------------*/    public static int getLength(HeroNode head) &#123;...&#125;    public static HeroNode findLastIndexNode(HeroNode head, int K) &#123;&#125;    public static void reverseLinkedHead(HeroNode head) &#123;&#125;    public static void reversePrint(HeroNode head) &#123;&#125;   /**-------下面 `面试题部分`方法可以放在这个地方进行运行----------------*/&gt;&#125;&gt;//一、定义一个HeroNode,每个HeroNode对象就是一个节点&gt;class HeroNode &#123;   public int no;   public String name;   public String nickname;   public HeroNode next;//指向下一个节点   //构造器   public HeroNode(int no, String name, String nickname) &#123;       this.no = no;       this.name = name;       this.nickname = nickname;   &#125;   //为了显示方法,我们重新toString   @Override   public String toString() &#123;       return &quot;HeroNode[no=&quot; + no + &quot;,name=&quot; + name + &quot;,nickname=&quot; + nickname + &quot;]&quot;;   &#125;&gt;&#125;&gt;//二、定义SingleLinkedList管理我们的英雄&gt;class SingleLinkedList &#123;   //1. 先初始化一个头节点,头节点不要动,不存放具体的数据   private HeroNode head = new HeroNode(0, &quot;&quot;, &quot;&quot;);   //2. 返回头节点,get方法  这个方法是配合下面面试题时使用,使外面也能获得私有变量   public HeroNode getHead() &#123;       return head;   &#125;   /**    * 3. 添加节点到单链表后-----------------弃用的,用来对比`addByOrder()`    * 思路:不考虑编号顺序,直接插入到链表最后    * 1)找到当前链表的最后节点    * 2)将最后这个节点的next指向新的节点    */   public void add(HeroNode heroNode) &#123;       //因为head节点是不能动的,动了的话链表就找不到入口或者找错路口,所以我们需要一个辅助遍历       HeroNode temp = head;       //遍历链表,找到最后       while (true) &#123;           //找到链表的最后:当next值为空,就是最后一位           if (temp.next == null) break;           //如果没有找到最后,就将temp向后移动,不然就原地踏步死循环了           temp = temp.next;       &#125;       //当退出while循环的时候,temp就指向了链表的最后       //将最后这个节点的next指向新的节点       temp.next = heroNode;   &#125;   //4. 添加节点到单链表后,按no排序   public void addByOrder(HeroNode heroNode) &#123;   /*因为head节点是不能动的,动了的话链表就找不到入口或者找错路口,所以我们需要一个辅助遍历      因为单链表,所以我们找的temp 必须为于添加位置的前一个节点,否则插入不了*/       HeroNode temp = head;       boolean flag = false; //flag标识添加的编号是否存在,默认为false       while (true) &#123;           if (temp.next == null) break;//说明temp已经在链表的最后,就在链表插入(此时temp已经在链表尾部了)           if (temp.next.no &gt; heroNode.no) break;//说明位置已经找到,就在temp的后面插入           else if (temp.next.no == heroNode.no) &#123;//说明希望添加的heroNode编号已经存在               flag = true;               break;           &#125;           temp = temp.next;//temp后移,直到找到符合上面条件为止       &#125;       if (flag) System.out.printf(&quot;准备插入的英雄的编号%d已经存在了,不能加入\\n&quot;, heroNode.no);       else &#123;           //将heroNode插入到链表的temp后面           heroNode.next = temp.next;           temp.next = heroNode;       &#125;   &#125;   //5. 修改节点信息,根据no编号来修改,即no编号不能改   public void update(HeroNode newHeroNode) &#123;       if (head.next == null) &#123;           System.out.println(&quot;链表为空&quot;);           return;       &#125;       ;       //定义一个辅助变量       HeroNode temp = head;       boolean flag = false;       //找到需要修改的节点,根据no编号       while (true) &#123;           if (temp == null) break; //表示当前到链表尾端           if (temp.no == newHeroNode.no) &#123;//表示找到该节点了               flag = true;               break;           &#125;           temp = temp.next;       &#125;       if (flag) &#123;//根据flag可以判断是否找到要修改的节点           temp.name = newHeroNode.name;           temp.nickname = newHeroNode.nickname;       &#125; else System.out.printf(&quot;没有找到编号%d的阶段,不能进行修改\\n&quot;, newHeroNode.no);   &#125;   //6. 删除节点1.head不能动,所以需要一个temp辅助节点找到待删除节点前的一个节点   //         2.我们比较时,时temp.next.no和待删除节点的no比较   public void del(int no) &#123;&gt;//        if (head.next == null) &#123;&gt;//            System.out.println(&quot;链表为空&quot;);&gt;//            return;&gt;//        &#125;此处可以不加,与下面代码功能重复       HeroNode temp = head;       boolean flag = false;       while (true) &#123;           if (temp.next == null) break;//说明到了链表的最后           if (temp.next.no == no) &#123;               //表示找到了待删除节点的前一个节点temp               flag = true;               break;           &#125;           temp = temp.next;//temp后移,遍历       &#125;       if (flag) temp.next = temp.next.next; //如果找到,进行删除       else System.out.printf(&quot;要删除的%d节点不存在\\n&quot;, no);   &#125;   //7. 显示链表[遍历]   public void list() &#123;       //判断链表是否为空       if (head.next == null) &#123;           System.out.println(&quot;链表为空&quot;);           return;       &#125;       //因为头节点不能动且头节点是没有数据的,所以直接`head.next;`       HeroNode temp = head.next;       while (true) &#123;           if (temp == null) break;           //输出节点信息           System.out.println(temp);           //将temp后移,一定小心           temp = temp.next;       &#125;   &#125;&gt;&#125;\n\n3、单链表 面试题\n单链表的常见面试题有如下:\n1)求单链表中有效节点的个数\n2)查找单链表中的倒数第k个结点 【新浪面试题】\n3)单链表的反转【腾讯面试题，有点难度】\n4)从尾到头打印单链表 【百度，要求方式1：反向遍历 。 方式2：Stack栈】\n5)合并两个有序的单链表，合并之后的链表依然有序【课后练习.】\n以下例子将在2部分的全部代码中实现,在上面代码中已经预留位置\n\nⅠ-求单链表中有效节点的个数\n就是直接遍历 没得分析,直接上代码:\n /**    * 1. 求单链表中有效节点的个数    * 方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)    * @param head 链表的头节点    * @return 返回的就是有效节点的个数    */   public static int getLength(HeroNode head) &#123;       if (head.next == null) return 0; //空链表       int length = 0; //声明一个累加器       //定义一个辅助的变量,这里我们没有统计头节点(--&gt;head.next)       HeroNode cur = head.next;       while (cur != null) &#123;//当当前节点 为空时退出累计遍历           length++;           cur = cur.next;       &#125;       return length;   &#125;;&gt;-----------------main()调用  ---------------------------&gt;System.out.println(&quot;有效的节点个数=&quot; + getLength(singleLinkedList.getHead()));//2\n\nⅡ-查找单链表中的倒数第k个结点 【新浪面试题】\n\n思路分析:\n\n  1)编写一个方法，接收head节点，同时接收一个K\n  2)K表示是倒数第K个节点\n  3)先把链表从头到尾遍历，得到链表的总的长度 getLength\n  4)得到size 后，我们从链表的第一个开始遍历 (size-K)个，就可以得到\n  5)如果找到了，则返回该节点，否则返回nulll\n\n代码示例:\n\n      /**2.查找单链表中的倒数第k个结点     * @param head 要进行查找的单向链表     * @param K 传入倒数第几位 数字     * @return 该位置的节点     */    public static HeroNode findLastIndexNode(HeroNode head, int K) &#123;        if (head.next == null) return null; //空链表,无法找到        //1. 获得链表的长度(总个数)        int size = getLength(head);        //2. 做一个K的校验,明显K不能为负数以及大于总长度        if (K &lt;= 0 || K &gt; size) return null;        //3. 定义给辅助变量        HeroNode cur = head.next;        //4. 遍历 倒数第K个节点 就是`size-K`的位置        for (int i = 0; i &lt; (size - K); i++) &#123;            cur = cur.next; //cur后移到符合条件的位置        &#125;        return cur;    &#125;-----------------main()调用  --------------------------- //测试一下看看是否得到了倒数第K个节点 HeroNode res = findLastIndexNode(singleLinkedList.getHead(), 2); System.out.println(&quot;res=&quot; + res);\n\nⅢ-单链表的反转【腾讯面试题，有点难度】\n\n解决这个问题的核心就是头插法。\n\n首先创建一个临时头结点用于记录反转过程中的链表；\n\n\n遍历单链表，每遍历到一个有效结点，就让该有效结点指向临时头结点指向的结点；\n\n临时头结点再指向该有效结点，\n\n原单链表遍历结束之后，再让原头结点指向临时头结点指向的结点。\n\n图片示例(该动图取自RonzL的博客):\n\n具体举例图解\n\n代码实现:\n\n实现方法一:\n\n\n\n   /**    * 3.单链表的反转【腾讯面试题，有点难度】    * @param head 传入需要进行反转的单链表    */   public static void reverseLinkedHead(HeroNode head) &#123;        //1. 当链表为空或者只有一个节点时候,直接返回,无需反转       if (head.next == null || head.next.next == null) return;        //2. 定义一个辅助的指针遍历,帮助我们遍历原来的链表        HeroNode cur = head.next;        //3. 定义一个next,辅助变量,来指向当前节点[cur]的下一个节点,用来进行位置互换        HeroNode next = null;        //4. 初始化一个新的头节点,用来暂时存放反转链表        HeroNode reverseHead = new HeroNode(0, &quot;&quot;, &quot;&quot;);        //5. 遍历原来的链表,每遍历一个节点,就将其取出,并放在新的链表reverseHead的最前端        while (cur != null) &#123;//当当前节点 为空时退出累计遍历            next = cur.next; //先暂时保存当前节点的下一个节点,后面换完位置后需要复原cur的下一位,否则无法遍历            cur.next = reverseHead.next;//将cur的下一个节点指向新的链表的最前端            reverseHead.next = cur;//将cur链接到新的链表上            cur = next;//让cur后移        &#125;        //遍历结束,将head.next指向reverseHead.next 接管链表,实现单链表的反转        head.next = reverseHead.next;    &#125;-----------------main()调用  ---------------------------   //7. 测试一下单链表的反转功能\tSystem.out.println(&quot;原来链表的情况~~&quot;);\tsingleLinkedList.list();\tSystem.out.println(&quot;反转单链表~~&quot;);\treverseLinkedHead(singleLinkedList.getHead());\tsingleLinkedList.list();\n\n 1. 实现方法二(只是写法改变,但代码显得更容易理解):\n\n   /** * 单链表的反转 */public SingleLinkedList reverse() &#123;   SingleLinkedList linkedList = new SingleLinkedList();    // 遍历待反转的链表，将结点依次添加到新链表   Node tmp = head;    while (tmp.next != null) &#123;        linkedList.addFirst(tmp.next.item);        tmp = tmp.next;    &#125;    return linkedList;&#125;public boolean addFirst(Integer item) &#123;    Node newNode = new Node(item, null);    // tmp 指向头结点    Node tmp = head;    newNode.next = tmp.next;    tmp.next = newNode;    return true;&#125;\n\n\nⅣ-从尾到头打印单链表\n\n【百度面试题，要求方式1：反向遍历(上一个问题解决) 。 方式2：Stack栈   方法3: 递归】\n\n栈方法\n\n思路分析图解:\n\n代码示例:\n /**  * 4. 可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果  * @param head 要传入的链表头  */ public static void reversePrint(HeroNode head) &#123;     if (head.next == null) return; //空链表 不能打印     //创建一个栈,将各个节点压入栈     Stack&lt;HeroNode&gt; stack = new Stack&lt;HeroNode&gt;();     HeroNode cur = head.next;     //将链表所有节点压入栈     while (cur != null) &#123;         stack.push(cur);         cur = cur.next;//cur后移,这样就可以压入下一个节点     &#125;     //将栈中节点取出打印.利用其先进后出特点,实现逆序da&#x27;yin     while (stack.size() &gt; 0) &#123;         System.out.println(stack.pop());     &#125; &#125; -----------------main()调用  ---------------------------//8.测试逆序打印单链表, 没有改变链表的结构~~System.out.println(&quot;测试逆序打印单链表, 没有改变链表的结构~~&quot;);reversePrint(singleLinkedList.getHead());\n递归方式\n\n图例(该动图取自RonzL的博客):\n\n代码实现:\n/** * 使用递归打印结点 * @Param [node] 链表的第一个结点，即 head.next */public static void printReverse_3(HeroNode node)&#123;    // 这里一定要先递归调用再打印    if (node.next != null)&#123;        printReverse_3(node.next);    &#125;    System.out.println(node);&#125;\n\n\nⅤ-合并两个有序的单链表，合并之后的链表依然有序\n练习题目:合并两个有序的单链表，合并之后的链表依然有序\n\n思路解析:\n\n如果传入的节点1为空了(即已经递归到链表尾或者是空链表),返回节点2,反之亦然(同时return会结束该递归函数(但是递归函数结束后接着return,所以整个递归函数将会停止)并返回)。\n判断no是否重复,如果重复就重新递归传入链表下一级head2.next,不重复就传入head2\n递归其实都是在进行对于head.next的赋值,直到传入节点为空(符合前面两个判断条件),开始向外return,此时逐层给head.next赋值,最后会返回到最外层函数返回值处,就是合并后的链表\n\n\n代码实现:\n\n\n      /**     * 合并两个单链表静态函数     * @param head1 传入第一个链表头节点     * @param head2 传入第二个链表头节点     * @return 返回合并后的链表     */    public static HeroNode mergeLinkedList(HeroNode head1, HeroNode head2) &#123;        if (head1 == null) return head2; //此处是递归,不能按head.next==null进行判断,否则会造成数据丢失        if (head2 == null)  return head1;             if (head1.no &lt;= head2.no) &#123;            //如果不加这个判断,如果两者的no相同,将会导致出现重复的数据(如两个),判断后进入递归            //打印代码 System.out.println(&quot;head:&quot;+head+&quot;,head.next:&quot;+head.next);            //打印结果 headHeroNode:[no=0,name=,nickname=],head.nextHeroNode:[no=0,name=,nickname=]            head1.next = (head2.no != head1.no) ? mergeLinkedList(head1.next, head2)              \t\t\t  : mergeLinkedList(head1.next, head2.next);//            head1.next= mergeLinkedList(head1.next, head2);  犯下的错误,导致数据重复            return head1;        &#125; else &#123;            head2.next = mergeLinkedList(head1, head2.next);            return head2;        &#125;    &#125;    /**     * 遍历打印静态链表     * @param head 传入打印的链表头节点     */    public static void staticList(HeroNode head) &#123;        //判断链表是否为空        if (head.next == null) &#123;            System.out.println(&quot;链表为空&quot;);            return;        &#125;        //因为头节点不能动且头节点是没有数据的,所以直接`head.next;`        HeroNode temp = head.next;        System.out.println(&quot;head&quot; + head + &quot;,head.next&quot; + head.next);        while (true) &#123;            if (temp == null) break;            //输出节点信息            System.out.println(temp);            //将temp后移,一定小心            temp = temp.next;        &#125;    &#125;-------------------  main()调用 --------------------------------  HeroNode hero1 = new HeroNode(1, &quot;宋江&quot;, &quot;及时雨&quot;);  HeroNode hero2 = new HeroNode(2, &quot;卢俊义&quot;, &quot;玉麒麟&quot;);  HeroNode hero3 = new HeroNode(5, &quot;洪吉林&quot;, &quot;帅哥&quot;);  HeroNode hero4 = new HeroNode(4, &quot;林冲&quot;, &quot;豹子头&quot;);  HeroNode hero5 = new HeroNode(5, &quot;洪吉林&quot;, &quot;帅哥&quot;);  HeroNode hero6 = new HeroNode(6, &quot;努力学习的汪&quot;, &quot;好学生&quot;);  HeroNode hero7 = new HeroNode(7, &quot;离婚且带娃&quot;, &quot;不是我&quot;);  HeroNode hero8 = new HeroNode(8, &quot;你听我狡辩&quot;, &quot;口头禅&quot;);      //创建链表对象  SingleLinkedList singleLinkedList = new SingleLinkedList();  SingleLinkedList singleLinkedList1 = new SingleLinkedList();  //2. 添加方法  singleLinkedList.addByOrder(hero1);  singleLinkedList.addByOrder(hero3);  singleLinkedList.addByOrder(hero4);  singleLinkedList.addByOrder(hero7);  singleLinkedList.list();  System.out.println(&quot;两个链表分界线&quot;);  //-----------课后作业:第二个链表-----------------------  singleLinkedList1.addByOrder(hero2);  singleLinkedList1.addByOrder(hero5);  singleLinkedList1.addByOrder(hero6);  singleLinkedList1.addByOrder(hero8);  singleLinkedList1.list();  System.out.println(&quot;合并两个链表&quot;);  staticList(mergeLinkedList(singleLinkedList.getHead(), singleLinkedList1.getHead()));\n\n4、双向链表与其实例\n\n双向链表实现实际上对比单向链表多了一个pre属性,大部分功能相似\n\n使用双向链表实现水浒传英雄增删改查思路图:\n\n\n  \n\n删除部分代码实现:\n\n  /**   * 5. 从双向链表中删除一个节点   * 说明:   * 1.对于双向链表,我们可以直接找到要删除的这个节点   * 2.找到后,自我删除即可   */  public void del(int no) &#123;      if (head.next == null) &#123;          System.out.println(&quot;链表为空,无法删除&quot;);          return;      &#125;      DoubleHeroNode temp = head;//辅助遍历(指针)      boolean flag = false;//标识是否找到待删除节点      while (true) &#123;          if (temp == null) break;//已经到了链表最后          if (temp.no == no) &#123; //找到待删除的节点              flag = true;              break;          &#125;          temp = temp.next;//temp后移,遍历      &#125;      if (flag) &#123;          temp.pre.next = temp.next;//将下一个节点地址赋值给上一个节点的`next`          //如果不加判断,可能当前节点是最后一个,导致`temp.next.pre`会出现空指针异常          if (temp.next != null) temp.next.pre = temp.pre;//将下一个节点的上一个(pre)赋值为当前节点的上一个(pre)      &#125; else System.out.printf(&quot;要删除的%d节点不存在\\n&quot;, no);    &#125;\n\n\n全部代码(包括课堂练习题):\n\n  package com.linkedlist.doublelinked;public class DoubleLinkedListDemo &#123;    public static void main(String[] args) &#123;        DoubleHeroNode hero1 = new DoubleHeroNode(1, &quot;宋江&quot;, &quot;及时雨&quot;);        DoubleHeroNode hero2 = new DoubleHeroNode(2, &quot;卢俊义&quot;, &quot;玉麒麟&quot;);        DoubleHeroNode hero3 = new DoubleHeroNode(3, &quot;吴用&quot;, &quot;智多星&quot;);        DoubleHeroNode hero4 = new DoubleHeroNode(4, &quot;林冲&quot;, &quot;豹子头&quot;);        DoubleHeroNode hero5 = new DoubleHeroNode(5, &quot;666&quot;, &quot;666&quot;);        //创建链表对象        DoubleLinkedList doubleLinkedList = new DoubleLinkedList();        //1.直接添加到链表尾部        doubleLinkedList.add(hero1);        doubleLinkedList.add(hero2);        doubleLinkedList.add(hero3);        doubleLinkedList.add(hero4);        doubleLinkedList.list();        //修改测试        System.out.println(&quot;测试修改林冲&quot;);        DoubleHeroNode newHeroNode = new DoubleHeroNode(4, &quot;洪吉林&quot;, &quot;零充&quot;);        doubleLinkedList.update(newHeroNode);        doubleLinkedList.list();        //删除测试        System.out.println(&quot;测试删除吴用&quot;);        doubleLinkedList.del(3);        doubleLinkedList.list();        //测试插入添加        //1.直接添加到链表尾部        System.out.println(&quot;测试插入添加 &quot;);        doubleLinkedList.addByOrder(hero5);        doubleLinkedList.addByOrder(hero3);        doubleLinkedList.list();    &#125;&#125;class DoubleLinkedList &#123;    //1. 先初始化一个头节点,头节点不要动,不存放具体的数据    private DoubleHeroNode head = new DoubleHeroNode(0, &quot;&quot;, &quot;&quot;);    //2. 返回头节点,get方法    public DoubleHeroNode getHead() &#123;        return head;    &#125;    //3. 添加一个节点节点到双向链表的最后    public void add(DoubleHeroNode heroNode) &#123;        //因为head节点是不能动的,动了的话链表就找不到入口或者找错路口,所以我们需要一个辅助遍历        DoubleHeroNode temp = head;        //遍历链表,找到最后        while (true) &#123;            //找到链表的最后:当next值为空,就是最后一位            if (temp.next == null) break;            //如果没有找到最后,就将temp向后移动,不然就原地踏步死循环了            temp = temp.next;        &#125;        //当退出while循环的时候,temp就指向了链表的最后        //形成一个双向链表        temp.next = heroNode;        heroNode.pre = temp;    &#125;    //3.1 按照no进行对双向链表的插入,课堂练习题    public void addByOrder(DoubleHeroNode heroNode) &#123;        DoubleHeroNode temp = head;//需要找到要添加位置的前一个节点        boolean flag = false;        while (true) &#123;            if (temp.next == null) break;//说明已经遍历到链表最后            if (temp.next.no &gt; heroNode.no) break;//说明已经找到,就在temp后面插入            else if (temp.next.no == heroNode.no) &#123;//说明已经存在重复no                flag = true;                break;            &#125;            temp = temp.next;        &#125;        if (flag) System.out.printf(&quot;准备插入的英雄的编号%d已经存在了,不能加入\\n&quot;, heroNode.no);        else &#123;            heroNode.next = temp.next; //将temp的下next赋值到要插入的节点的next            heroNode.pre = temp;  //将temp作为heroNode的pre(上一位)            temp.next = heroNode; //在找到的位置后面插入heroNode ,并且这里不用判断非空        &#125;    &#125;    //4. 修改节点信息,    //可以看到双向链表的节点内容修改与单向链表一样,只是节点类型改变    public void update(DoubleHeroNode newHeroNode) &#123;        if (head.next == null) &#123;            System.out.println(&quot;链表为空&quot;);            return;        &#125;        DoubleHeroNode temp = head;        boolean flag = false;        //找到需要修改的节点,根据no编号        while (true) &#123;            if (temp == null) break; //表示当前到链表尾端            if (temp.no == newHeroNode.no) &#123;//表示找到该节点了                flag = true;                break;            &#125;            temp = temp.next;        &#125;        if (flag) &#123;//根据flag可以判断是否找到要修改的节点            temp.name = newHeroNode.name;            temp.nickname = newHeroNode.nickname;        &#125; else System.out.printf(&quot;没有找到编号%d的阶段,不能进行修改\\n&quot;, newHeroNode.no);    &#125;    /**     * 5. 从双向链表中删除一个节点     * 说明:     * 1.对于双向链表,我们可以直接找到要删除的这个节点     * 2.找到后,自我删除即可     */    public void del(int no) &#123;        if (head.next == null) &#123;            System.out.println(&quot;链表为空,无法删除&quot;);            return;        &#125;        DoubleHeroNode temp = head;//辅助遍历(指针)        boolean flag = false;//标识是否找到待删除节点        while (true) &#123;            if (temp == null) break;//已经到了链表最后            if (temp.no == no) &#123; //找到待删除的节点                flag = true;                break;            &#125;            temp = temp.next;//temp后移,遍历        &#125;        if (flag) &#123;            temp.pre.next = temp.next;//将下一个节点地址赋值给上一个节点的`next`            //如果不加判断,可能当前节点是最后一个,导致`temp.next.pre`会出现空指针异常            if (temp.next != null) temp.next.pre = temp.pre;//将下一个节点的上一个(pre)赋值为当前节点的上一个(pre)        &#125; else System.out.printf(&quot;要删除的%d节点不存在\\n&quot;, no);    &#125;    //7. 显示链表[遍历]    public void list() &#123;        //判断链表是否为空        if (head.next == null) &#123;            System.out.println(&quot;链表为空&quot;);            return;        &#125;        //因为头节点不能动且头节点是没有数据的,所以直接`head.next;`        DoubleHeroNode temp = head.next;        while (true) &#123;            if (temp == null) break;            //输出节点信息            System.out.println(temp);            //将temp后移,一定小心            temp = temp.next;        &#125;    &#125;&#125;//一、定义一个HeroNode,每个HeroNode对象就是一个节点class DoubleHeroNode &#123;    public int no;    public String name;    public String nickname;    public DoubleHeroNode next;//指向下一个节点,默认为null    public DoubleHeroNode pre;//指向前一个节点,默认为null    //构造器    public DoubleHeroNode(int no, String name, String nickname) &#123;        this.no = no;        this.name = name;        this.nickname = nickname;    &#125;    //为了显示方法,我们重新toString    @Override    public String toString() &#123;        return &quot;HeroNode[no=&quot; + no + &quot;,name=&quot; + name + &quot;,nickname=&quot; + nickname + &quot;]&quot;;    &#125;&#125;\n\n5、单向与双向链表对比\n\n管理单向链表相较于双向链表的缺点分析\n\n\n① 单链表只有一个指向下一结点的指针，也就是只能next; ② 双链表除了有一个指向下一结点的指针外，还有一个指向前一结点的指针，可以通过prev()快速找到前一结点，顾名思义，单链表只能单向读取\n\n单向链表不能自我删除，需要靠辅助节点 ，而双向链表则可以自我删除，所以前面我们单链表删除时节点，总是找到 temp,temp 是待删除节点的前一个节点,双向链表则是可以直接将temp指向要删除的节点\n\n\n\n双链表具有以下优点:\n\n删除单链表中的某个结点时，一定要得到待删除结点的前驱，得到该前驱有两种方法，第一种方法是在定位待删除结点的同时一路保存当前结点的前驱。第二种方法是在定位到待删除结点之后，重新从单链表表头开始来定位前驱。尽管通常会采用方法一。但其实这两种方法的效率是一样\n\n查找时也一样，我们可以借用二分法的思路，从head（首节点）向后查找操作和last（尾节点）向前查找操作同步进行，这样双链表的效率可以提高一倍\n\n面试官：从你的描述来看，双链表的在查找、删除的时候可以利用二分法的思想去实现,但是为什么目前市场应用上单链表的应用要比双链表的应用要广泛的多呢?\n\n\n\n从存储结构来看，每个双链表的节点要比单链表的节点多一个指针，而长度为n就需要 n*length（这个指针的length在32位系统中是4字节，在64位系统中是8个字节） 的空间，这在一些追求时间效率不高应用下并不适应，因为它占用空间大于单链表所占用的空间；这时设计者就会采用以时间换空间的做法，这时一种工程总体上的衡量。\n\n\n结构对比图\n\n  \n\n6、单链表之约瑟夫问题Ⅰ-问题描述:\n\n约瑟夫（ Josephu ） 问题是一个非常著名的有趣的题目。问题具体描述如下：\n\n  设编号分别为1、2、3… n 的 n 个人围坐一圈，约定编号为 k（1≤k≤n）的人从 1 开始报数，数到 m 的那个人出列。出列的人的下一位又从 1 开始报数，数到 m 的那个人继续出列。以此类推，直到所有人都出列为止，由此产生一个出队编号的序列，这个序列也就是约瑟夫问题的解。\n\n下面将用一个动图来描述一下这个问题\n\n  假设有 4 个人围坐一圈，约定编号为 1 的人开始报数，数到 3 的那个出列。最后产生的出队编号的序列将会是：3、2、4、1。\n  \n\nⅡ-老师给的思路实现\n\n用一个不带头结点的循环链表来处理 Josephu 问题：先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开 始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从 1 开始计数，直到最后一个结点从链表中删除算法结束。\n\n约瑟夫问题-创建环形链表的思路图解\n\n\n  \n\n约瑟夫问题-小孩出圈的思路分析图\n\n  \n\n代码实现:\n\n  package com.linkedlist.josepfu;public class Josepfu &#123;    public static void main(String[] args) &#123;       int NUM=5;// 加入5个小孩节点        // 测试一把看看构建环形链表，和遍历是否ok        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();        circleSingleLinkedList.addBoy(NUM);        circleSingleLinkedList.showBoy();        //测试一把小孩出圈是否正确        circleSingleLinkedList.countBoy(1, 2, NUM); // 2-&gt;4-&gt;1-&gt;5-&gt;3    &#125;&#125;//二、创建一个环形的单向链表class CircleSingleLinkedList &#123;    //1. 创建一个first节点,当前没有编号    private Boy first = null;    //2. 添加小孩节点,构建成一个环形的链表    public void addBoy(int nums) &#123;        //nums做一个数据校验        if (nums &lt; 1) &#123;            System.out.println(&quot;nums的值不正确&quot;);            return;        &#125;        Boy curBoy = null; //辅助指针,帮助构建环形链表        //使用for来创建我们的环形链表        for (int i = 1; i &lt;= nums; i++) &#123;//i从1开始,才能得到编号与数字顺序一样的no;            //根据编号创建小孩节点            Boy boy = new Boy(i);            if (i == 1) &#123; //如果fori从0开始遍历,这里也要改为i==0,否则下面 `curBoy.setNext(boy);`将空指针异常                first = boy;                first.setNext(first); //构成环,即只有一个时自己指向自己                curBoy = first;            &#125; else &#123;                boy.setNext(first); //将当前次循环的next指向第一个节点形成环                curBoy.setNext(boy);//此处curBoy标记的是上一次循环的boy 如`i==2`--&gt;curBoy==first、`i==3`--&gt;curBoy==boy(第二个)                curBoy = boy;  //这一步是移动当前curBoy位置到boy,保存当前boy 用作在下轮循环中指定当前boy的next            &#125;        &#125;    &#125;    //3. 遍历当前环形链表    public void showBoy() &#123;        if (first == null) &#123;            System.out.println(&quot;没有任何小孩~~~~&quot;);            return;        &#125;        Boy curBoy = first;        while (true) &#123;            System.out.printf(&quot;小孩编号%d\\n&quot;, curBoy.getNo());            if (curBoy.getNext() == first) break;            curBoy = curBoy.getNext();//curBoy后移        &#125;    &#125;    /**     * //4. 根据用户输入,计算小孩出圈的顺序     *     * @param startNo  开始的位置     * @param countNum 每次循环的数字     * @param nums     单纯用来校验循环次数是否多于总长度     */    public void countBoy(int startNo, int countNum, int nums) &#123;        if (first == null || startNo &lt; 1 || startNo &gt; nums) &#123;            System.out.println(&quot;参数输入有误,请重新输入&quot;);            return;        &#125;        //①创建一个辅助指针,帮助完成小孩出圈        Boy helper = first;        //②将辅助指针事先指向环形列表的最后这个节点(即next指向first)        while (true) &#123;            if (helper.getNext() == first) break;//说明helper指向最后的小孩节点            helper = helper.getNext();        &#125;        //③小孩报数前,先让first和helper移动K-1次(如果我是从3开始,我需要事先指向3的位置)        //为什么是K-1次--&gt;因为循环i是从0开始的        for (int i = 0; i &lt; startNo - 1; i++) &#123;            first = first.getNext();            helper = helper.getNext();        &#125;        //④出圈删除:当小孩报数时,让first和helper指针同时移动m-1次,然后出圈        while (true) &#123;            if (helper == first) break; //说明圈中只有一个节点            //让first和helper指针同时移动countNum-1次            for (int i = 0; i &lt; countNum - 1; i++) &#123;                first = first.getNext();                helper = helper.getNext();            &#125;            //出了for循环后,此时first指向的节点就是要出圈的小孩节点            System.out.printf(&quot;小孩%d出圈\\n&quot;, first.getNo());            //此时将first指向的小孩节点出圈            first = first.getNext();           //注意:此处用的时setNext--&gt;这步就是删除操作,原来的first指向的节点没有任何引用的时候,就会被回收            helper.setNext(first);        &#125;        System.out.printf(&quot;最后留在圈中的小孩编号%d\\n&quot;, first.getNo());    &#125;&#125;//一、创建一个Boy类,表示一个节点class Boy &#123;    private int no;//编号    private Boy next; //指向下一个节点,默认null    public Boy(int no) &#123;        this.no = no;    &#125;    public int getNo() &#123;        return no;    &#125;    public void setNo(int no) &#123;        this.no = no;    &#125;    public Boy getNext() &#123;        return next;    &#125;    public void setNext(Boy next) &#123;        this.next = next;    &#125;&#125;\n\n\nⅢ-思路改进与代码实现\n将该问题解决思想带入 实现水浒传英雄 (该思路与解决于查阅RonzL的博客后学习记录)\n\n思路解析:\n\n首先要确定解决问题的核心思想：使用一个不带头结点的循环(环形)链表来处理该问题。\n\n假设每个结点代表一个人，那么一个由 n 个结点组成的循环链表就相当于是 n 个人围成的一个圈。那么约瑟夫问题以环形链表的形式来描述就是如下情景：\n首先使用 n 个结点构成一个单向循环链表，然后由第 k 个结点起从 1 开始计数，当计到 m 时，从链表中删除对应结点；接着从被删除结点的下一个结点开始从 1 计数，当计到 m 时，继续从链表中删除。依次循环往复，直到链表中的所有结点都被删除为止。\n\n那么对于这个单向循环链表形式下的约瑟夫问题，我们如何解决呢？\n\n我们可以引入一个辅助指针 helperNode，这个指针总是指向待删除结点的前一个结点。为什么这个辅助指针要指向待删除结点的前一个结点，而不是指向自身呢？\n\n因为我们的目的是要删除当前计数为 m 的结点，但是受限于单向链表的特性（如果要删除单链表的某个结点，必须要知道该结点的前一个结点），我们无法让结点自己删除自己。鉴于这个特性，我们必须要引入一个辅助指针来记录当前正在计数的结点的前一个结点，这样才能符合删除条件的结点从链表中删除。\n\n\n\n\n\n引入这个辅助指针之后，具体的操作思路如下:\n\n每一轮计数开始时，总让辅助指针 helperNode 初始指向本轮第一个计数的结点；\n从第一个计数的结点开始计数至 m，实际上是向后移动了 m-1 个结点。由于辅助指针总是指向待删除结点的前一个结点，因此让需要让辅助指从第一个计数结点后移 m-2 个结点；\n辅助指针移动到待删除结点的前一个结点之后，只需要让辅助指针指向待删除的结点的下一个结点即可完成删除操作；\n依次循环往复，直至只剩最后一个结点；\n对于环形链表判断是否只有最后一个结点，只需要判断辅助指针指向的结点是否是辅助指针指向的结点的下一个结点即可。\n\n\n上面的思路可以用下面一个动图来描述:\n\n\n \n\n\n代码实现:\n\n package com.linkedlist.doublelinked;/** * 课程外思路实现 */public class DoubleLinkedListDemo2 &#123;    public static void main(String[] args) &#123;        // 构造测试数据        HeroNode node_1 = new HeroNode(1, &quot;宋江&quot;, &quot;及时雨&quot;);        HeroNode node_2 = new HeroNode(2, &quot;卢俊义&quot;, &quot;玉麒麟&quot;);        HeroNode node_3 = new HeroNode(3, &quot;吴用&quot;, &quot;智多星&quot;);        HeroNode node_4 = new HeroNode(4, &quot;公孙胜&quot;, &quot;入云龙&quot;);        HeroNode node_5 = new HeroNode(5, &quot;洪吉林&quot;, &quot;码农&quot;);        HeroNode node_6 = new HeroNode(6, &quot;努力学习的汪&quot;, &quot;学习狗&quot;);        System.out.println(&quot;===============向环形链表中插入结点==================&quot;);        HeroNode first = insertCircleList(null, node_1);        first = insertCircleList(first, node_2);        first = insertCircleList(first, node_3);        first = insertCircleList(first, node_4);        first = insertCircleList(first, node_5);        first = insertCircleList(first, node_6);        showList(first);        System.out.println(&quot;===============约瑟夫游戏开始===============&quot;);        // 从第 1 个结点开始计数，每次计 3 个数。        josepfuGame(first, 1, 3);    &#125;    /**     * @Description 1. 约瑟夫游戏开始     * @Param [first, k, m]   头节点,从第 k 个人开始数，每次数 m 个     */    public static void josepfuGame(HeroNode first, int k, int m) &#123;        if (first == null) &#123;            System.out.println(&quot;链表为空！&quot;);            return;        &#125;        HeroNode helperNode = first;        // 首先要移动到第 k 个结点，此时辅助指针初始指向第一个计数的结点        for (int i = 1; i &lt; k; i++) &#123;            helperNode = helperNode.next;        &#125;        while (helperNode.next.getNo() != helperNode.getNo()) &#123;            // 报数， m 个数也就是相当于向后移动 m-1 次，也就是要把第 m-1 个结点去掉            // 由于单链表的特点，要去掉第 m-1 个结点，肯定是要让指针前一个结点，即第(m-2)个结点            for (int j = 0; j &lt; m - 2; j++) &#123;  // 让指针后移 m-2 个结点                helperNode = helperNode.next;            &#125;            System.out.println(helperNode.next + &quot;退出链表了!&quot;);            // 删除结点            helperNode.next = helperNode.next.next;            // 因为下一轮要从刚刚去掉的结点的后面一个结点开始计数了，所以需要让辅助指针初始指向下一轮第一个计数的结点            helperNode = helperNode.next;        &#125;        System.out.println(helperNode + &quot;退出链表了!&quot;);    &#125;    /**     * @Description 2. 插入结点到环形链表中，用于构造环形链表     */    public static HeroNode insertCircleList(HeroNode first, HeroNode node) &#123;        // 判断链表是不是为空，如果为空，就直接插入        if (first == null) &#123;            first = node;            // 因为要环形链表，而且只有一个结点，所以要我指向我自己            first.next = node;        &#125; else &#123;            // 如果环形链表不为空            HeroNode tempNode = first;            while (true) &#123;                // 如果到了环形链表的最后一个元素                if (tempNode.next.getNo() == first.getNo()) &#123;                    tempNode.next = node;                    // 因为是环形链表，所以最后一个结点还要指向第一个结点                    node.next = first;                    break;                &#125;                tempNode = tempNode.next;            &#125;        &#125;        return first;    &#125;    /**     * @Description 3. 打印单向环形链表     */    public static void showList(HeroNode first) &#123;        if (first == null) &#123;            System.out.println(&quot;链表为空！&quot;);            return;        &#125;        HeroNode tempNode = first;        while (true) &#123;            if (tempNode.next.getNo() == first.getNo()) &#123;                System.out.println(tempNode);                break;            &#125;            System.out.println(tempNode);            tempNode = tempNode.next;        &#125;    &#125;&#125;class HeroNode &#123;    private int no;             // 本节点数据    private String name;    private String nickName;    public HeroNode next;       // 指向下一个节点    public HeroNode(int no, String name, String nickName) &#123;        this.no = no;        this.name = name;        this.nickName = nickName;    &#125;    public int getNo() &#123;        return no;    &#125;    //为了显示方法,我们重新toString    @Override    public String toString() &#123;        return &quot;HeroNode[no=&quot; + no + &quot;,name=&quot; + name + &quot;,nickname=&quot; + nickName + &quot;]&quot;;    &#125;&#125;\n\n四、栈1、栈的概念Ⅰ-什么是栈\n\n栈的英文为(stack) \n\n栈是一个先入后出(FILO-First In Last Out)的有序列表。 \n\n栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的 一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。 \n\n根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除 \n\n图解方式说明出栈(pop)和入栈(push)的概念\n\n\n​    \n\nⅡ-栈的应用场景\n栈作为一种重要的基本数据结构，它的应用是比较广泛的。栈的应用包括如下几个方面：\n\n子程序的调用：在跳往子程序前， 会先将下个指令的地址存到堆栈中， 直到子程序执行完后再将地址取出， 以 回到原来的程序中；\n处理递归调用：和子程序的调用类似， 只是除了储存下一个指令的地址外， 也将参数、 区域变量等数据存入堆 栈中；\n表达式的转换（中缀表达式转后缀表达式）与求值；\n二叉树的遍历；\n图形的深度优先（depth 一 first）搜索法。\n\n\n2、数组模拟栈\n由于栈是一种有序列表， 当然可以使用数组的结构来储存栈的数据内容。下面我们就用数组模拟栈的出栈， 入栈等操作。\n\nⅠ-思路分析\n使用数组来模拟栈的思路是比较简单的，按照下面的步骤即可\n\n定义一个类，该类的成员变量包括一个数组 stack（用于模拟栈）、两个整型变量 maxSize、top（分别代表栈的大小、栈顶指针）；\n栈顶指针 top 初始化为 -1；\n每当有元素要入栈时，top 加 1，然后元素记录在数组中，即 stack[top] = element；\n每当有元素要出栈时，先读取数组的元素，即 element = stack[top]，然后 top 减 1。\n\n\nⅡ-代码实现\n&gt;package com.stack;&gt;import java.util.Scanner;&gt;public class ArrayStackDemo &#123;   public static void main(String[] args) &#123;       //测试一下ArrayStack 是否正确       //先创建一个ArrayStack对象-&gt;表示栈       ArrayStack stack = new ArrayStack(4);       String key = &quot;&quot;;       boolean loop = true; //控制是否退出菜单       Scanner scanner = new Scanner(System.in);       while (loop) &#123;           System.out.println(&quot;show: 表示显示栈&quot;);           System.out.println(&quot;exit: 退出程序&quot;);           System.out.println(&quot;push: 表示添加数据到栈(入栈)&quot;);           System.out.println(&quot;pop: 表示从栈取出数据(出栈)&quot;);           System.out.println(&quot;请输入你的选择&quot;);           key = scanner.next();           switch (key) &#123;               case &quot;show&quot;:                   stack.list();                   break;               case &quot;push&quot;:                   System.out.println(&quot;请输入一个数&quot;);                   int value = scanner.nextInt();                   stack.push(value);                   break;               case &quot;pop&quot;:                   try &#123;                       int res = stack.pop();                       System.out.printf(&quot;出栈的数据是 %d\\n&quot;, res);                   &#125; catch (Exception e) &#123;                       // TODO: handle exception                       System.out.println(e.getMessage());                   &#125;                   break;               case &quot;exit&quot;:                   scanner.close();                   loop = false;                   break;               default:                   break;           &#125;       &#125;       System.out.println(&quot;程序退出~~~&quot;);   &#125;&gt;&#125;&gt;//1. 定义一个ArrayStack栈&gt;class ArrayStack &#123;   private int maxSize;//栈的大小   private int[] stack; //数组,数组模拟栈   private int top = -1; //top表示栈顶,初始化为-1   public ArrayStack(int maxSize) &#123;       this.maxSize = maxSize;       stack = new int[this.maxSize];   &#125;   //栈满   public boolean isFull() &#123;       return top == maxSize - 1;   &#125;   //栈空   public boolean isEmpty() &#123;       return top == -1;   &#125;   //入栈--push   public void push(int value) &#123;       if (isFull()) &#123;           System.out.println(&quot;栈满&quot;);           return;       &#125;       top++;       stack[top] = value;   &#125;   //出栈-pop,将栈顶的数据返回   public int pop() &#123;       if (isEmpty()) throw new RuntimeException(&quot;栈空,没有数据&quot;);       int value = stack[top];       top--;       return value;   &#125;   //遍历栈,遍历时需要从栈顶开始显示数据   public void list() &#123;       if (isEmpty()) &#123;           System.out.println(&quot;栈空,没有数据&quot;);           return;       &#125;       for (int i = top; i &gt;= 0; i--) &#123;           System.out.printf(&quot;stack[%d]=%d\\n&quot;, i, stack[i]);       &#125;   &#125;&gt;&#125;\n\n3、栈实现简单计算器（中缀）Ⅰ-思路分析\n\n表达式分为中缀表达式、前缀表达式、后缀表达式。中缀表达式就是表达式本身，如 “3+2*6-1” 就是一个中缀表达式。关于表达式的详细介绍将会在后面的笔记中展示\n\n本案例实现的简单计算器就是直接对中缀表达式（也就是原计算表达式）进行分析处理。\n\n如果要实现一个计算器，可以按照以下思路：\n\n\n\n初始化两个栈，一个作为符号栈、一个作为数字栈；\n\n通过一个索引 index，来从左至右遍历中缀表达式；\n\n如果遍历到的是一个数字，就直接入数字栈；\n\n如果遍历到的是一个符号：\n\n\n  ​    ① 如果当前符号栈为空，就直接入符号栈；\n  ​    ② 如果符号栈有操作符，就进行比较：\n  ​        1. 若当前的操作符优先级小于或等于栈顶的操作符，就从数字栈中 pop 出两个数，再从符号栈中 pop 出一个符号进行运算。运算得到的结果 push 入数字栈中，然后将当前的操作符入符号栈；\n  ​        2. 若当前的操作符优先级大于栈顶的操作符，就直接入符号栈；\n\n中缀表达式遍历完毕之后，就依次从数字栈和符号栈中 pop 出相应的数和符号，对他们进行运算；\n\n最后在数字栈中将只剩下一个数字，这个数字就是表达式的结果。\n\n\n\n思路分析图:\n\n  \n\nⅡ-代码实现:\n&gt;package com.stack;&gt;public class Calculator &#123;   public static void main(String[] args) &#123;       String expression = &quot;70*2+2*3+2000&quot;;       //先创建两个栈,一个数栈一个符号栈       ArrayStack2 numStack = new ArrayStack2(10);       ArrayStack2 operStack = new ArrayStack2(10);       //定义相关变量       int index = 0, num1 = 0, num2 = 0, oper = 0, res = 0;       char ch = &#x27; &#x27;;//每次将扫描到的char保存于ch中       String keepNum = &quot;&quot;;//用于拼接多位数       //开始循环扫描expression       while (true) &#123;           //依次得到expression的每一个字符           ch = expression.substring(index, index + 1).charAt(0);           //判断ch是什么           if (operStack.isOper(ch)) &#123;//如果是运算符               if (!operStack.isEmpty()) &#123;//判断当前字符站是否为空                   //如果符号栈中有操作符,就进行比较如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数                   //再从符号栈中pop出一个符号进行运算,再将得到的结果入数栈,然后将当前的操作符入符号栈                   if (operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;                       num1 = numStack.pop();                       num2 = numStack.pop();                       oper = operStack.pop();                       res = numStack.cal(num1, num2, oper);                       //把运算的结果入数栈                       numStack.push(res);                       //然后将当前的操作符入符号栈                       operStack.push(ch);                   &#125; else operStack.push(ch);//如果当前操作符的优先级大于栈中的操作符,就直接入符号栈               &#125; else operStack.push(ch);   //如果为空直接入符号栈           &#125; else &#123;               //如果是数,则直接入数栈               //numStack.push(ch - 48); //? &quot;1+3&quot; &#x27;1&#x27; =&gt; 1               //分析思路               //1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数               //2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈               //3. 因此我们需要定义一个变量 字符串，用于拼接               //处理多位数               keepNum += ch;               //如果ch已经是expression的最后一位,就直接入栈               if (index == expression.length() - 1) numStack.push(Integer.parseInt(keepNum));               else &#123;                   //判断下一个字符是不是数字,如果是数字,就继续扫描,如果是运算符,则入栈                   if (operStack.isOper(expression.substring(index + 1, index + 2).charAt(0))) &#123;//此处是判断是符号入栈,并清空,不是不好就记录下来 下轮使用                       numStack.push(Integer.parseInt(keepNum));                       keepNum = &quot;&quot;;                   &#125;               &#125;           &#125;           index++;           if (index &gt;= expression.length()) break; //结束循环，跳出循环体，执行后面的程序。       &#125;       //当表达式扫描完毕,就顺序的从数栈和符号栈中pop出相应的数和符号,并进行运算       //经过上面的操作，符号栈剩下的都是优先级相等的符号了，直接出栈做运算就可以啦       while (true) &#123;           //如果符号栈为空,则计算到最后的结果,数栈中只有一个数字--结果           if (operStack.isEmpty()) break;           num1 = numStack.pop();           num2 = numStack.pop();           oper = operStack.pop();           res = numStack.cal(num1, num2, oper);           numStack.push(res);//结果入栈&gt;//            System.out.println(&quot;-------- 出循环后数栈 ---------&quot;);&gt;//            numStack.list();&gt;//            System.out.println(&quot;-----------------&quot;);       &#125;       int res2 = numStack.pop();       System.out.printf(&quot;表达式%s=%d&quot;, expression, res2);   &#125;&gt;&#125;&gt;//1. 定义一个ArrayStack栈&gt;class ArrayStack2 &#123;   private int maxSize;//栈的大小   private int[] stack; //数组,数组模拟栈   private int top = -1; //top表示栈顶,初始化为-1   public ArrayStack2(int maxSize) &#123;       this.maxSize = maxSize;       stack = new int[this.maxSize];   &#125;   //可以返回当前栈顶的值,但不是pop,而是用做对比   public int peek() &#123;       return stack[top];   &#125;   //栈满   public boolean isFull() &#123;       return top == maxSize - 1;   &#125;   //栈空   public boolean isEmpty() &#123;       return top == -1;   &#125;   //入栈--push   public void push(int value) &#123;       if (isFull()) &#123;           System.out.println(&quot;栈满&quot;);           return;       &#125;       top++;       stack[top] = value;   &#125;   //出栈-pop,将栈顶的数据返回   public int pop() &#123;       if (isEmpty()) throw new RuntimeException(&quot;栈空,没有数据&quot;);       int value = stack[top];       top--;       return value;   &#125;   //遍历栈,遍历时需要从栈顶开始显示数据   public void list() &#123;       if (isEmpty()) &#123;           System.out.println(&quot;栈空,没有数据&quot;);           return;       &#125;       for (int i = top; i &gt;= 0; i--) &#123;           System.out.printf(&quot;stack[%d]=%d\\n&quot;, i, stack[i]);       &#125;   &#125;   //返回运算符的优先级,优先级是程序员来确定,优先级使用数字表示   //数字越大,则优先级越高   public int priority(int oper) &#123;       if (oper == &#x27;*&#x27; || oper == &#x27;/&#x27;) return 1;       else if (oper == &#x27;+&#x27; || oper == &#x27;-&#x27;) return 0;       else return -1;   &#125;   //判断是否为一个运算符   public boolean isOper(char val) &#123;       return val == &#x27;+&#x27; || val == &#x27;-&#x27; || val == &#x27;*&#x27; || val == &#x27;/&#x27;;   &#125;   //计算方法   public int cal(int num1, int num2, int oper) &#123;       int res = 0;       switch (oper) &#123;           case &#x27;+&#x27;:               res = num1 + num2;               break;           case &#x27;-&#x27;:               res = num2 - num1;// 注意顺序               break;           case &#x27;*&#x27;:               res = num1 * num2;               break;           case &#x27;/&#x27;:               res = num2 / num1;               break;           default:               break;       &#125;       return res;   &#125;&gt;&#125;\n\n"},{"title":"java基础","url":"/2021/05/24/java%E5%9F%BA%E7%A1%80/","content":"Java 基础\n\nJava 基础\n一、数据类型\n基本类型\n包装类型\n缓存池\n\n\n二、String\n概览\n不可变的好处\nString, StringBuffer and StringBuilder    \nString Pool\nnew String(“abc”)\n\n\n三、运算\n参数传递\nfloat 与 double\n隐式类型转换\nswitch\n\n\n四、关键字\nfinal\nstatic\n\n\n五、Object 通用方法\n概览\nequals()\nhashCode()\ntoString()\nclone()\n\n\n六、继承\n访问权限\n抽象类与接口\nsuper\n重写与重载\n\n\n七、反射\n八、异常\n九、泛型\n十、注解\n十一、特性\nJava 各版本的新特性\nJava 与 C++ 的区别\nJRE or JDK\n\n\n参考资料\n\n\n\n一、数据类型基本类型\nbyte/8\nchar/16\nshort/16\nint/32\nfloat/32\nlong/64\ndouble/64\nboolean/~\n\nboolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。\n\nPrimitive Data Types\nThe Java® Virtual Machine Specification\n\n包装类型基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\nInteger x = 2;     // 装箱 调用了 Integer.valueOf(2)int y = x;         // 拆箱 调用了 X.intValue()\n\n\nAutoboxing and Unboxing\n\n缓存池new Integer(123) 与 Integer.valueOf(123) 的区别在于：\n\nnew Integer(123) 每次都会新建一个对象；\nInteger.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n\nInteger x = new Integer(123);Integer y = new Integer(123);System.out.println(x == y);    // falseInteger z = Integer.valueOf(123);Integer k = Integer.valueOf(123);System.out.println(z == k);   // true\n\nvalueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\npublic static Integer valueOf(int i) &#123;    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)        return IntegerCache.cache[i + (-IntegerCache.low)];    return new Integer(i);&#125;\n\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\nstatic final int low = -128;static final int high;static final Integer cache[];static &#123;    // high value may be configured by property    int h = 127;    String integerCacheHighPropValue =        sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);    if (integerCacheHighPropValue != null) &#123;        try &#123;            int i = parseInt(integerCacheHighPropValue);            i = Math.max(i, 127);            // Maximum array size is Integer.MAX_VALUE            h = Math.min(i, Integer.MAX_VALUE - (-low) -1);        &#125; catch( NumberFormatException nfe) &#123;            // If the property cannot be parsed into an int, ignore it.        &#125;    &#125;    high = h;    cache = new Integer[(high - low) + 1];    int j = low;    for(int k = 0; k &lt; cache.length; k++)        cache[k] = new Integer(j++);    // range [-128, 127] must be interned (JLS7 5.1.7)    assert IntegerCache.high &gt;= 127;&#125;\n\n编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。\nInteger m = 123;Integer n = 123;System.out.println(m == n); // true\n\n基本类型对应的缓冲池如下：\n\nboolean values true and false\nall byte values\nshort values between -128 and 127\nint values between -128 and 127\nchar in the range \\u0000 to \\u007F\n\n在使用这些基本类型对应的包装类型时，如果该数值范围在缓冲池范围内，就可以直接使用缓冲池中的对象。\n在 jdk 1.8 所有的数值类缓冲池中，Integer 的缓冲池 IntegerCache 很特殊，这个缓冲池的下界是 - 128，上界默认是 127，但是这个上界是可调的，在启动 jvm 的时候，通过 -XX:AutoBoxCacheMax=&lt;size&gt; 来指定这个缓冲池的大小，该选项在 JVM 初始化的时候会设定一个名为 java.lang.IntegerCache.high 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。\nStackOverflow : Differences between new Integer(123), Integer.valueOf(123) and just 123\n\n二、String概览String 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）\n在 Java 8 中，String 内部使用 char 数组存储数据。\npublic final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;    /** The value is used for character storage. */    private final char value[];&#125;\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 coder 来标识使用了哪种编码。\npublic final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;    /** The value is used for character storage. */    private final byte[] value;    /** The identifier of the encoding used to encode the bytes in &#123;@code value&#125;. */    private final byte coder;&#125;\n\nvalue 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\n不可变的好处1. 可以缓存 hash 值  \n因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。\n2. String Pool 的需要  \n如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。\n  \n\n3. 安全性  \nString 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 的那一方以为现在连接的是其它主机，而实际情况却不一定是。\n4. 线程安全  \nString 不可变性天生具备线程安全，可以在多个线程中安全地使用。\nProgram Creek : Why String is immutable in Java?\nString, StringBuffer and StringBuilder1. 可变性  \n\nString 不可变\nStringBuffer 和 StringBuilder 可变\n\n2. 线程安全  \n\nString 不可变，因此是线程安全的\nStringBuilder 不是线程安全的\nStringBuffer 是线程安全的，内部使用 synchronized 进行同步\n\nStackOverflow : String, StringBuffer, and StringBuilder\nString Pool字符串常量池（String Pool）保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool 中。\n当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。\n下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同字符串，而 s3 和 s4 是通过 s1.intern() 和 s2.intern() 方法取得同一个字符串引用。intern() 首先把 “aaa” 放到 String Pool 中，然后返回这个字符串引用，因此 s3 和 s4 引用的是同一个字符串。\nString s1 = new String(&quot;aaa&quot;);String s2 = new String(&quot;aaa&quot;);System.out.println(s1 == s2);           // falseString s3 = s1.intern();String s4 = s2.intern();System.out.println(s3 == s4);           // true\n\n如果是采用 “bbb” 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。\nString s5 = &quot;bbb&quot;;String s6 = &quot;bbb&quot;;System.out.println(s5 == s6);  // true\n\n在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。而在 Java 7，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。\n\nStackOverflow : What is String interning?\n深入解析 String#intern\n\nnew String(“abc”)使用这种方式一共会创建两个字符串对象（前提是 String Pool 中还没有 “abc” 字符串对象）。\n\n“abc” 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个 “abc” 字符串字面量；\n而使用 new 的方式会在堆中创建一个字符串对象。\n\n创建一个测试类，其 main 方法中使用这种方式来创建字符串对象。\npublic class NewStringTest &#123;    public static void main(String[] args) &#123;        String s = new String(&quot;abc&quot;);    &#125;&#125;\n\n使用 javap -verbose 进行反编译，得到以下内容：\n// ...Constant pool:// ...   #2 = Class              #18            // java/lang/String   #3 = String             #19            // abc// ...  #18 = Utf8               java/lang/String  #19 = Utf8               abc// ...  public static void main(java.lang.String[]);    descriptor: ([Ljava/lang/String;)V    flags: ACC_PUBLIC, ACC_STATIC    Code:      stack=3, locals=2, args_size=1         0: new           #2                  // class java/lang/String         3: dup         4: ldc           #3                  // String abc         6: invokespecial #4                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V         9: astore_1// ...\n\n在 Constant Pool 中，#19 存储这字符串字面量 “abc”，#3 是 String Pool 的字符串对象，它指向 #19 这个字符串字面量。在 main 方法中，0: 行使用 new #2 在堆中创建一个字符串对象，并且使用 ldc #3 将 String Pool 中的字符串对象作为 String 构造函数的参数。\n以下是 String 构造函数的源码，可以看到，在将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组。\npublic String(String original) &#123;    this.value = original.value;    this.hash = original.hash;&#125;\n\n三、运算参数传递Java 的参数是以值传递的形式传入方法中，而不是引用传递。\n以下代码中 Dog dog 的 dog 是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中。\npublic class Dog &#123;    String name;    Dog(String name) &#123;        this.name = name;    &#125;    String getName() &#123;        return this.name;    &#125;    void setName(String name) &#123;        this.name = name;    &#125;    String getObjectAddress() &#123;        return super.toString();    &#125;&#125;\n\n在方法中改变对象的字段值会改变原对象该字段值，因为引用的是同一个对象。\nclass PassByValueExample &#123;    public static void main(String[] args) &#123;        Dog dog = new Dog(&quot;A&quot;);        func(dog);        System.out.println(dog.getName());          // B    &#125;    private static void func(Dog dog) &#123;        dog.setName(&quot;B&quot;);    &#125;&#125;\n\n但是在方法中将指针引用了其它对象，那么此时方法里和方法外的两个指针指向了不同的对象，在一个指针改变其所指向对象的内容对另一个指针所指向的对象没有影响。\npublic class PassByValueExample &#123;    public static void main(String[] args) &#123;        Dog dog = new Dog(&quot;A&quot;);        System.out.println(dog.getObjectAddress()); // Dog@4554617c        func(dog);        System.out.println(dog.getObjectAddress()); // Dog@4554617c        System.out.println(dog.getName());          // A    &#125;    private static void func(Dog dog) &#123;        System.out.println(dog.getObjectAddress()); // Dog@4554617c        dog = new Dog(&quot;B&quot;);        System.out.println(dog.getObjectAddress()); // Dog@74a14482        System.out.println(dog.getName());          // B    &#125;&#125;\n\nStackOverflow: Is Java “pass-by-reference” or “pass-by-value”?\nfloat 与 doubleJava 不能隐式执行向下转型，因为这会使得精度降低。\n1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。\n// float f = 1.1;\n\n1.1f 字面量才是 float 类型。\nfloat f = 1.1f;\n\n隐式类型转换因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型向下转型为 short 类型。\nshort s1 = 1;// s1 = s1 + 1;\n\n但是使用 += 或者 ++ 运算符会执行隐式类型转换。\ns1 += 1;s1++;\n\n上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：\ns1 = (short) (s1 + 1);\n\nStackOverflow : Why don’t Java’s +=, -=, *=, /= compound assignment operators require casting?\nswitch从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。\nString s = &quot;a&quot;;switch (s) &#123;    case &quot;a&quot;:        System.out.println(&quot;aaa&quot;);        break;    case &quot;b&quot;:        System.out.println(&quot;bbb&quot;);        break;&#125;\n\nswitch 不支持 long、float、double，是因为 switch 的设计初衷是对那些只有少数几个值的类型进行等值判断，如果值过于复杂，那么还是用 if 比较合适。\n// long x = 111;// switch (x) &#123; // Incompatible types. Found: &#x27;long&#x27;, required: &#x27;char, byte, short, int, Character, Byte, Short, Integer, String, or an enum&#x27;//     case 111://         System.out.println(111);//         break;//     case 222://         System.out.println(222);//         break;// &#125;\n\nStackOverflow : Why can’t your switch statement data type be long, Java?\n四、关键字final1. 数据  \n声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\n\n对于基本类型，final 使数值不变；\n对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。\n\nfinal int x = 1;// x = 2;  // cannot assign value to final variable &#x27;x&#x27;final A y = new A();y.a = 1;\n\n2. 方法  \n声明方法不能被子类重写。\nprivate 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\n3. 类  \n声明类不允许被继承。\nstatic1. 静态变量  \n\n静态变量：又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它。静态变量在内存中只存在一份。\n实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。\n\npublic class A &#123;    private int x;         // 实例变量    private static int y;  // 静态变量    public static void main(String[] args) &#123;        // int x = A.x;  // Non-static field &#x27;x&#x27; cannot be referenced from a static context        A a = new A();        int x = a.x;        int y = A.y;    &#125;&#125;\n\n2. 静态方法  \n静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法。\npublic abstract class A &#123;    public static void func1()&#123;    &#125;    // public abstract static void func2();  // Illegal combination of modifiers: &#x27;abstract&#x27; and &#x27;static&#x27;&#125;\n\n只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。\npublic class A &#123;    private static int x;    private int y;    public static void func1()&#123;        int a = x;        // int b = y;  // Non-static field &#x27;y&#x27; cannot be referenced from a static context        // int b = this.y;     // &#x27;A.this&#x27; cannot be referenced from a static context    &#125;&#125;\n\n3. 静态语句块  \n静态语句块在类初始化时运行一次。\npublic class A &#123;    static &#123;        System.out.println(&quot;123&quot;);    &#125;    public static void main(String[] args) &#123;        A a1 = new A();        A a2 = new A();    &#125;&#125;\n\n123\n\n4. 静态内部类  \n非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。\npublic class OuterClass &#123;    class InnerClass &#123;    &#125;    static class StaticInnerClass &#123;    &#125;    public static void main(String[] args) &#123;        // InnerClass innerClass = new InnerClass(); // &#x27;OuterClass.this&#x27; cannot be referenced from a static context        OuterClass outerClass = new OuterClass();        InnerClass innerClass = outerClass.new InnerClass();        StaticInnerClass staticInnerClass = new StaticInnerClass();    &#125;&#125;\n\n静态内部类不能访问外部类的非静态的变量和方法。\n5. 静态导包  \n在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。\nimport static com.xxx.ClassName.*\n\n6. 初始化顺序  \n静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\npublic static String staticField = &quot;静态变量&quot;;\n\nstatic &#123;    System.out.println(&quot;静态语句块&quot;);&#125;\n\npublic String field = &quot;实例变量&quot;;\n\n&#123;    System.out.println(&quot;普通语句块&quot;);&#125;\n\n最后才是构造函数的初始化。\npublic InitialOrderTest() &#123;    System.out.println(&quot;构造函数&quot;);&#125;\n\n存在继承的情况下，初始化顺序为：\n\n父类（静态变量、静态语句块）\n子类（静态变量、静态语句块）\n父类（实例变量、普通语句块）\n父类（构造函数）\n子类（实例变量、普通语句块）\n子类（构造函数）\n\n五、Object 通用方法概览public native int hashCode()public boolean equals(Object obj)protected native Object clone() throws CloneNotSupportedExceptionpublic String toString()public final native Class&lt;?&gt; getClass()protected void finalize() throws Throwable &#123;&#125;public final native void notify()public final native void notifyAll()public final native void wait(long timeout) throws InterruptedExceptionpublic final void wait(long timeout, int nanos) throws InterruptedExceptionpublic final void wait() throws InterruptedException\n\nequals()1. 等价关系  \n两个对象具有等价关系，需要满足以下五个条件：\nⅠ 自反性\nx.equals(x); // true\n\nⅡ 对称性\nx.equals(y) == y.equals(x); // true\n\nⅢ 传递性\nif (x.equals(y) &amp;&amp; y.equals(z))    x.equals(z); // true;\n\nⅣ 一致性\n多次调用 equals() 方法结果不变\nx.equals(y) == x.equals(y); // true\n\nⅤ 与 null 的比较\n对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false\nx.equals(null); // false;\n\n2. 等价与相等  \n\n对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。\n对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。\n\nInteger x = new Integer(1);Integer y = new Integer(1);System.out.println(x.equals(y)); // trueSystem.out.println(x == y);      // false\n\n3. 实现  \n\n检查是否为同一个对象的引用，如果是直接返回 true；\n检查是否是同一个类型，如果不是，直接返回 false；\n将 Object 对象进行转型；\n判断每个关键域是否相等。\n\npublic class EqualExample &#123;    private int x;    private int y;    private int z;    public EqualExample(int x, int y, int z) &#123;        this.x = x;        this.y = y;        this.z = z;    &#125;    @Override    public boolean equals(Object o) &#123;        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        EqualExample that = (EqualExample) o;        if (x != that.x) return false;        if (y != that.y) return false;        return z == that.z;    &#125;&#125;\n\nhashCode()hashCode() 返回哈希值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价，这是因为计算哈希值具有随机性，两个值不同的对象可能计算出相同的哈希值。\n在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象哈希值也相等。\nHashSet  和 HashMap 等集合类使用了 hashCode()  方法来计算对象应该存储的位置，因此要将对象添加到这些集合类中，需要让对应的类实现 hashCode()  方法。\n下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的，只在集合中添加一个对象。但是 EqualExample 没有实现 hashCode() 方法，因此这两个对象的哈希值是不同的，最终导致集合添加了两个等价的对象。\nEqualExample e1 = new EqualExample(1, 1, 1);EqualExample e2 = new EqualExample(1, 1, 1);System.out.println(e1.equals(e2)); // trueHashSet&lt;EqualExample&gt; set = new HashSet&lt;&gt;();set.add(e1);set.add(e2);System.out.println(set.size());   // 2\n\n理想的哈希函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的哈希值上。这就要求了哈希函数要把所有域的值都考虑进来。可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。\nR 一般取 31，因为它是一个奇素数，如果是偶数的话，当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位，最左边的位丢失。并且一个数与 31 相乘可以转换成移位和减法：31*x == (x&lt;&lt;5)-x，编译器会自动进行这个优化。\n@Overridepublic int hashCode() &#123;    int result = 17;    result = 31 * result + x;    result = 31 * result + y;    result = 31 * result + z;    return result;&#125;\n\ntoString()默认返回 ToStringExample@4554617c 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。\npublic class ToStringExample &#123;    private int number;    public ToStringExample(int number) &#123;        this.number = number;    &#125;&#125;\n\nToStringExample example = new ToStringExample(123);System.out.println(example.toString());\n\nToStringExample@4554617c\n\nclone()1. cloneable  \nclone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。\npublic class CloneExample &#123;    private int a;    private int b;&#125;\n\nCloneExample e1 = new CloneExample();// CloneExample e2 = e1.clone(); // &#x27;clone()&#x27; has protected access in &#x27;java.lang.Object&#x27;\n\n重写 clone() 得到以下实现：\npublic class CloneExample &#123;    private int a;    private int b;    @Override    public CloneExample clone() throws CloneNotSupportedException &#123;        return (CloneExample)super.clone();    &#125;&#125;\n\nCloneExample e1 = new CloneExample();try &#123;    CloneExample e2 = e1.clone();&#125; catch (CloneNotSupportedException e) &#123;    e.printStackTrace();&#125;\n\njava.lang.CloneNotSupportedException: CloneExample\n\n以上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。\n应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。\npublic class CloneExample implements Cloneable &#123;    private int a;    private int b;    @Override    public Object clone() throws CloneNotSupportedException &#123;        return super.clone();    &#125;&#125;\n\n2. 浅拷贝  \n拷贝对象和原始对象的引用类型引用同一个对象。\npublic class ShallowCloneExample implements Cloneable &#123;    private int[] arr;    public ShallowCloneExample() &#123;        arr = new int[10];        for (int i = 0; i &lt; arr.length; i++) &#123;            arr[i] = i;        &#125;    &#125;    public void set(int index, int value) &#123;        arr[index] = value;    &#125;    public int get(int index) &#123;        return arr[index];    &#125;    @Override    protected ShallowCloneExample clone() throws CloneNotSupportedException &#123;        return (ShallowCloneExample) super.clone();    &#125;&#125;\n\nShallowCloneExample e1 = new ShallowCloneExample();ShallowCloneExample e2 = null;try &#123;    e2 = e1.clone();&#125; catch (CloneNotSupportedException e) &#123;    e.printStackTrace();&#125;e1.set(2, 222);System.out.println(e2.get(2)); // 222\n\n3. 深拷贝  \n拷贝对象和原始对象的引用类型引用不同对象。\npublic class DeepCloneExample implements Cloneable &#123;    private int[] arr;    public DeepCloneExample() &#123;        arr = new int[10];        for (int i = 0; i &lt; arr.length; i++) &#123;            arr[i] = i;        &#125;    &#125;    public void set(int index, int value) &#123;        arr[index] = value;    &#125;    public int get(int index) &#123;        return arr[index];    &#125;    @Override    protected DeepCloneExample clone() throws CloneNotSupportedException &#123;        DeepCloneExample result = (DeepCloneExample) super.clone();        result.arr = new int[arr.length];        for (int i = 0; i &lt; arr.length; i++) &#123;            result.arr[i] = arr[i];        &#125;        return result;    &#125;&#125;\n\nDeepCloneExample e1 = new DeepCloneExample();DeepCloneExample e2 = null;try &#123;    e2 = e1.clone();&#125; catch (CloneNotSupportedException e) &#123;    e.printStackTrace();&#125;e1.set(2, 222);System.out.println(e2.get(2)); // 2\n\n4. clone() 的替代方案  \n使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。\npublic class CloneConstructorExample &#123;    private int[] arr;    public CloneConstructorExample() &#123;        arr = new int[10];        for (int i = 0; i &lt; arr.length; i++) &#123;            arr[i] = i;        &#125;    &#125;    public CloneConstructorExample(CloneConstructorExample original) &#123;        arr = new int[original.arr.length];        for (int i = 0; i &lt; original.arr.length; i++) &#123;            arr[i] = original.arr[i];        &#125;    &#125;    public void set(int index, int value) &#123;        arr[index] = value;    &#125;    public int get(int index) &#123;        return arr[index];    &#125;&#125;\n\nCloneConstructorExample e1 = new CloneConstructorExample();CloneConstructorExample e2 = new CloneConstructorExample(e1);e1.set(2, 222);System.out.println(e2.get(2)); // 2\n\n六、继承访问权限Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。\n可以对类或类中的成员（字段和方法）加上访问修饰符。\n\n类可见表示其它类可以用这个类创建实例对象。\n成员可见表示其它类可以用这个类的实例对象访问到该成员；\n\nprotected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。\n设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。\n如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例去代替，也就是确保满足里氏替换原则。\n字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 公有字段，如果在某个时刻，我们想要使用 int 存储 id 字段，那么就需要修改所有的客户端代码。\npublic class AccessExample &#123;    public String id;&#125;\n\n可以使用公有的 getter 和 setter 方法来替换公有字段，这样的话就可以控制对字段的修改行为。\npublic class AccessExample &#123;    private int id;    public String getId() &#123;        return id + &quot;&quot;;    &#125;    public void setId(String id) &#123;        this.id = Integer.valueOf(id);    &#125;&#125;\n\n但是也有例外，如果是包级私有的类或者私有的嵌套类，那么直接暴露成员不会有特别大的影响。\npublic class AccessWithInnerClassExample &#123;    private class InnerClass &#123;        int x;    &#125;    private InnerClass innerClass;    public AccessWithInnerClassExample() &#123;        innerClass = new InnerClass();    &#125;    public int getValue() &#123;        return innerClass.x;  // 直接访问    &#125;&#125;\n\n抽象类与接口1. 抽象类  \n抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。\n抽象类和普通类最大的区别是，抽象类不能被实例化，只能被继承。\npublic abstract class AbstractClassExample &#123;    protected int x;    private int y;    public abstract void func1();    public void func2() &#123;        System.out.println(&quot;func2&quot;);    &#125;&#125;\n\npublic class AbstractExtendClassExample extends AbstractClassExample &#123;    @Override    public void func1() &#123;        System.out.println(&quot;func1&quot;);    &#125;&#125;\n\n// AbstractClassExample ac1 = new AbstractClassExample(); // &#x27;AbstractClassExample&#x27; is abstract; cannot be instantiatedAbstractClassExample ac2 = new AbstractExtendClassExample();ac2.func1();\n\n2. 接口  \n接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。\n从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类，让它们都实现新增的方法。\n接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。从 Java 9 开始，允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。\n接口的字段默认都是 static 和 final 的。\npublic interface InterfaceExample &#123;    void func1();    default void func2()&#123;        System.out.println(&quot;func2&quot;);    &#125;    int x = 123;    // int y;               // Variable &#x27;y&#x27; might not have been initialized    public int z = 0;       // Modifier &#x27;public&#x27; is redundant for interface fields    // private int k = 0;   // Modifier &#x27;private&#x27; not allowed here    // protected int l = 0; // Modifier &#x27;protected&#x27; not allowed here    // private void fun3(); // Modifier &#x27;private&#x27; not allowed here&#125;\n\npublic class InterfaceImplementExample implements InterfaceExample &#123;    @Override    public void func1() &#123;        System.out.println(&quot;func1&quot;);    &#125;&#125;\n\n// InterfaceExample ie1 = new InterfaceExample(); // &#x27;InterfaceExample&#x27; is abstract; cannot be instantiatedInterfaceExample ie2 = new InterfaceImplementExample();ie2.func1();System.out.println(InterfaceExample.x);\n\n3. 比较  \n\n从设计层面上看，抽象类提供了一种 IS-A 关系，需要满足里式替换原则，即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。\n从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。\n接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\n接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。\n\n4. 使用选择  \n使用接口：\n\n需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Comparable 接口中的 compareTo() 方法；\n需要使用多重继承。\n\n使用抽象类：\n\n需要在几个相关的类中共享代码。\n需要能控制继承来的成员的访问权限，而不是都为 public。\n需要继承非静态和非常量字段。\n\n在很多情况下，接口优先于抽象类。因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。\n\nAbstract Methods and Classes\n深入理解 abstract class 和 interface\nWhen to Use Abstract Class and Interface\nJava 9 Private Methods in Interfaces\n\nsuper\n访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。应该注意到，子类一定会调用父类的构造函数来完成初始化工作，一般是调用父类的默认构造函数，如果子类需要调用父类其它构造函数，那么就可以使用 super() 函数。\n访问父类的成员：如果子类重写了父类的某个方法，可以通过使用 super 关键字来引用父类的方法实现。\n\npublic class SuperExample &#123;    protected int x;    protected int y;    public SuperExample(int x, int y) &#123;        this.x = x;        this.y = y;    &#125;    public void func() &#123;        System.out.println(&quot;SuperExample.func()&quot;);    &#125;&#125;\n\npublic class SuperExtendExample extends SuperExample &#123;    private int z;    public SuperExtendExample(int x, int y, int z) &#123;        super(x, y);        this.z = z;    &#125;    @Override    public void func() &#123;        super.func();        System.out.println(&quot;SuperExtendExample.func()&quot;);    &#125;&#125;\n\nSuperExample e = new SuperExtendExample(1, 2, 3);e.func();\n\nSuperExample.func()SuperExtendExample.func()\n\nUsing the Keyword super\n重写与重载1. 重写（Override）  \n存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\n为了满足里式替换原则，重写有以下三个限制：\n\n子类方法的访问权限必须大于等于父类方法；\n子类方法的返回类型必须是父类方法返回类型或为其子类型。\n子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。\n\n使用 @Override 注解，可以让编译器帮忙检查是否满足上面的三个限制条件。\n下面的示例中，SubClass 为 SuperClass 的子类，SubClass 重写了 SuperClass 的 func() 方法。其中：\n\n子类方法访问权限为 public，大于父类的 protected。\n子类的返回类型为 ArrayList&lt;Integer&gt;，是父类返回类型 List&lt;Integer&gt; 的子类。\n子类抛出的异常类型为 Exception，是父类抛出异常 Throwable 的子类。\n子类重写方法使用 @Override 注解，从而让编译器自动检查是否满足限制条件。\n\nclass SuperClass &#123;    protected List&lt;Integer&gt; func() throws Throwable &#123;        return new ArrayList&lt;&gt;();    &#125;&#125;class SubClass extends SuperClass &#123;    @Override    public ArrayList&lt;Integer&gt; func() throws Exception &#123;        return new ArrayList&lt;&gt;();    &#125;&#125;\n\n在调用一个方法时，先从本类中查找看是否有对应的方法，如果没有再到父类中查看，看是否从父类继承来。否则就要对参数进行转型，转成父类之后看是否有对应的方法。总的来说，方法调用的优先级为：\n\nthis.func(this)\nsuper.func(this)\nthis.func(super)\nsuper.func(super)\n\n/*    A    |    B    |    C    |    D */class A &#123;    public void show(A obj) &#123;        System.out.println(&quot;A.show(A)&quot;);    &#125;    public void show(C obj) &#123;        System.out.println(&quot;A.show(C)&quot;);    &#125;&#125;class B extends A &#123;    @Override    public void show(A obj) &#123;        System.out.println(&quot;B.show(A)&quot;);    &#125;&#125;class C extends B &#123;&#125;class D extends C &#123;&#125;\n\npublic static void main(String[] args) &#123;    A a = new A();    B b = new B();    C c = new C();    D d = new D();    // 在 A 中存在 show(A obj)，直接调用    a.show(a); // A.show(A)    // 在 A 中不存在 show(B obj)，将 B 转型成其父类 A    a.show(b); // A.show(A)    // 在 B 中存在从 A 继承来的 show(C obj)，直接调用    b.show(c); // A.show(C)    // 在 B 中不存在 show(D obj)，但是存在从 A 继承来的 show(C obj)，将 D 转型成其父类 C    b.show(d); // A.show(C)    // 引用的还是 B 对象，所以 ba 和 b 的调用结果一样    A ba = new B();    ba.show(c); // A.show(C)    ba.show(d); // A.show(C)&#125;\n\n2. 重载（Overload）  \n存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\n应该注意的是，返回值不同，其它都相同不算是重载。\nclass OverloadingExample &#123;    public void show(int x) &#123;        System.out.println(x);    &#125;    public void show(int x, String y) &#123;        System.out.println(x + &quot; &quot; + y);    &#125;&#125;\n\npublic static void main(String[] args) &#123;    OverloadingExample example = new OverloadingExample();    example.show(1);    example.show(1, &quot;2&quot;);&#125;\n\n七、反射每个类都有一个   Class   对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。\n类加载相当于 Class 对象的加载，类在第一次使用时才动态加载到 JVM 中。也可以使用 Class.forName(&quot;com.mysql.jdbc.Driver&quot;) 这种方式来控制类的加载，该方法会返回一个 Class 对象。\n反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。\nClass 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：\n\n Field  ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\n Method  ：可以使用 invoke() 方法调用与 Method 对象关联的方法；\n Constructor  ：可以用 Constructor 的 newInstance() 创建新的对象。\n\n反射的优点：  \n\n 可扩展性   ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。\n 类浏览器和可视化开发环境   ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。\n 调试器和测试工具   ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。\n\n反射的缺点：  \n尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。\n\n 性能开销   ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。\n\n 安全限制   ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。\n\n 内部暴露   ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。\n\nTrail: The Reflection API\n\n深入解析 Java 反射（1）- 基础\n\n\n八、异常Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：  Error   和 Exception。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种：\n\n  受检异常  ：需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；\n  非受检异常  ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。\n\n  \n\n\nJava Exception Interview Questions and Answers\n\nJava提高篇——Java 异常处理\n\n\n九、泛型public class Box&lt;T&gt; &#123;    // T stands for &quot;Type&quot;    private T t;    public void set(T t) &#123; this.t = t; &#125;    public T get() &#123; return t; &#125;&#125;\n\n\nJava 泛型详解\n10 道 Java 泛型面试题\n\n十、注解Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。\n注解 Annotation 实现原理与自定义注解例子\n十一、特性Java 各版本的新特性New highlights in Java SE 8  \n\nLambda Expressions\nPipelines and Streams\nDate and Time API\nDefault Methods\nType Annotations\nNashhorn JavaScript Engine\nConcurrent Accumulators\nParallel operations\nPermGen Error Removed\n\nNew highlights in Java SE 7  \n\nStrings in Switch Statement\nType Inference for Generic Instance Creation\nMultiple Exception Handling\nSupport for Dynamic Languages\nTry with Resources\nJava nio Package\nBinary Literals, Underscore in literals\nDiamond Syntax\n\n\nDifference between Java 1.8 and Java 1.7?\nJava 8 特性\n\nJava 与 C++ 的区别\nJava 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。\nJava 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。\nJava 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\nJava 支持自动垃圾回收，而 C++ 需要手动回收。\nJava 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\nJava 不支持操作符重载，虽然可以对两个 String 对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。\nJava 的 goto 是保留字，但是不可用，C++ 可以使用 goto。\n\nWhat are the main differences between Java and C++?\nJRE or JDK\nJRE：Java Runtime Environment，Java 运行环境的简称，为 Java 的运行提供了所需的环境。它是一个 JVM 程序，主要包括了 JVM 的标准实现和一些 Java 基本类库。\nJDK：Java Development Kit，Java 开发工具包，提供了 Java 的开发及运行环境。JDK 是 Java 开发的核心，集成了 JRE 以及一些其它的工具，比如编译 Java 源码的编译器 javac 等。\n\n参考资料\nEckel B. Java 编程思想[M]. 机械工业出版社, 2002.\nBloch J. Effective java[M]. Addison-Wesley Professional, 2017.\n\n","categories":["java"],"tags":["java"]}]